/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

#include "Actor.h"

class ActorDamageSource;
class ActorEvent;
class RenderParams;
class Options;
class EquipmentSlot;
class ActorDefinitionGroup;
class MobSpawnMethod;
class Player;
class ActorDamageCause;
class GoalDefinition;

class Mob : public Actor
{
public:
	//char filler_Mob[UNKNOW_SIZE];
public:
	virtual ~Mob();
	//virtual void reloadHardcoded(Actor::InitializationMethod, VariantParameterList const&);
	//virtual void reloadHardcodedClient(Actor::InitializationMethod, VariantParameterList const&);
	//virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
	virtual void hasComponent(Util::HashString const&) const;
	virtual void getInterpolatedBodyRot(float) const;
	virtual void getInterpolatedHeadRot(float) const;
	virtual void getInterpolatedBodyYaw(float) const;
	virtual void getYawSpeedInDegreesPerSecond() const;
	virtual void blockedByShield(ActorDamageSource const&, Actor&);
	virtual void teleportTo(Vec3 const&, bool, int, int);
	virtual void lerpTo(Vec3 const&, Vec2 const&, int);
	virtual void normalTick();
	virtual void baseTick();
	virtual void startRiding(Actor&);
	virtual void addRider(Actor&);
	virtual void playerTouch(Player&);
	virtual void isImmobile() const;
	virtual void isPickable();
	virtual void isSleeping() const;
	virtual void isShootable();
	virtual void isBlocking() const;
	virtual void isAlive() const;
	virtual void isSurfaceMob() const;
	virtual void setTarget(Actor*);
	virtual void attack(Actor&);
	virtual void canPowerJump() const;
	virtual void isJumping() const;
	virtual void actuallyHurt(int, ActorDamageSource const*, bool);
	virtual void animateHurt();
	virtual void doFireHurt(int);
	virtual void handleEntityEvent(ActorEvent, int);
	virtual void getArmorMaterialTypeInSlot(ArmorSlot) const;
	virtual void getArmorMaterialTextureTypeInSlot(ArmorSlot) const;
	virtual void getArmorColorInSlot(ArmorSlot, int) const;
	virtual void setEquippedSlot(ArmorSlot, int, int);
	virtual void setEquippedSlot(ArmorSlot, ItemStack const&);
	virtual void setOnFire(int);
	virtual void causeFallDamage(float);
	virtual void canBePulledIntoVehicle() const;
	virtual void inCaravan() const;
	virtual void stopRiding(bool, bool, bool);
	virtual void buildDebugInfo(std::string&) const;
	virtual void getDeathTime() const;
	virtual void swing();
	virtual void getYHeadRot() const;
	virtual void renderDebugServerState(Options const&);
	virtual void kill();
	virtual void die(ActorDamageSource const&);
	virtual void updateEntitySpecificMolangVariables(RenderParams&);
	virtual void outOfWorld();
	virtual void _hurt(ActorDamageSource const&, int, bool, bool);
	virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _playStepSound(BlockPos const&, Block const&);
	virtual void _removeRider(ActorUniqueID const&, bool, bool);
	virtual void onSizeUpdated();
	virtual void knockback(Actor*, int, float, float, float, float, float);
	virtual void resolveDeathLoot(int, ActorDamageSource const&);
	virtual void spawnAnim();
	virtual void setSleeping(bool);
	virtual void isSprinting() const;
	virtual void setSprinting(bool);
	virtual void getVoicePitch();
	virtual void playAmbientSound();
	virtual void getAmbientSound();
	virtual void getAmbientSoundPostponeTicks();
	virtual void getItemInHandIcon(ItemStack const&, int);
	virtual void getSpeed() const;
	virtual void setSpeed(float);
	virtual void getJumpPower() const;
	virtual void hurtEffects(ActorDamageSource const&, int, bool, bool);
	virtual void getMeleeWeaponDamageBonus(Mob*);
	virtual void getMeleeKnockbackBonus();
	virtual void travel(float, float, float);
	virtual void applyFinalFriction(float, bool);
	virtual void updateWalkAnim();
	virtual void aiStep();
	virtual void pushActors();
	virtual void lookAt(Actor*, float, float);
	virtual void isLookingAtAnEntity();
	virtual void checkSpawnRules(bool);
	virtual void checkSpawnObstruction() const;
	virtual void shouldDespawn() const;
	virtual void getAttackAnim(float);
	virtual void getItemUseDuration();
	virtual void getItemUseStartupProgress();
	virtual void getItemUseIntervalProgress();
	virtual void getItemuseIntervalAxis();
	virtual void getTimeAlongSwing();
	virtual void ate();
	virtual void getMaxHeadXRot();
	virtual void getLastHurtByMob();
	virtual void setLastHurtByMob(Mob*);
	virtual void getLastHurtByPlayer();
	virtual void setLastHurtByPlayer(Player*);
	virtual void getLastHurtMob();
	virtual void setLastHurtMob(Actor*);
	virtual void isAlliedTo(Mob*);
	virtual void doHurtTarget(Actor*);
	virtual void canBeControlledByRider();
	virtual void leaveCaravan();
	virtual void joinCaravan(Mob*);
	virtual void hasCaravanTail() const;
	virtual void getCaravanHead() const;
	virtual void getEquipmentCount() const;
	virtual void getArmorValue();
	virtual void getArmorCoverPercentage() const;
	virtual void hurtArmor(int);
	virtual void containerChanged(int);
	virtual void updateEquipment();
	virtual void clearEquipment();
	virtual void getAllArmor() const;
	virtual void getAllArmorID() const;
	virtual void getAllHand() const;
	virtual void getAllEquipment() const;
	virtual void getArmorTypeHash();
	virtual void sendInventory(bool);
	virtual void sendArmor();
	virtual void getDamageAfterMagicAbsorb(ActorDamageSource const&, int);
	virtual void createAIGoals();
	virtual void onBorn(Actor&, Actor&);
	virtual void setItemSlot(EquipmentSlot, ItemStack const&);
	virtual void goDownInWater();
	virtual void setTransitioningSitting(bool);
	virtual void attackAnimation(Actor*, float);
	virtual void getAttackTime();
	virtual void _getWalkTargetValue(BlockPos const&);
	virtual void canExistWhenDisallowMob() const;
	virtual void useNewAi() const;
	virtual void ascendLadder();
	virtual void ascendScaffolding();
	virtual void descendScaffolding();
	virtual void initBodyControl();
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void newServerAiStep();
	virtual void _serverAiMobStep();
	virtual void getDamageAfterEnchantReduction(ActorDamageSource const&, int);
	virtual void getDamageAfterArmorAbsorb(ActorDamageSource const&, int);
	virtual void getExperienceReward() const;
	virtual void dropEquipment(ActorDamageSource const&, int);
	virtual void dropEquipment();
	virtual void dropBags();
	virtual void dropContainer();
	virtual void tickDeath();
	virtual void _endJump();
	virtual void updateGliding();
	virtual void _allowAscendingScaffolding() const;
public:
	//Methods
	Mob(ActorDefinitionGroup*, ActorDefinitionIdentifier const&);
	Mob(Level&);
	void setJumping(bool);
	void onPlayerJump(int);
	void setFrictionModifier(float);
	void getGlidingTicks() const;
	void getFrictionModifier() const;
	void isGliding() const;
	void setYHeadRot(float);
	void applyRidingRotationLimits();
	void updateAttackAnim();
	void lerpTo(Vec3 const&, Vec2 const&, float, int);
	void isEating() const;
	void getRiderRotLimit() const;
	void getRiderLockedBodyRot() const;
	void isFrostWalking() const;
	void snapToYHeadRot(float);
	void setSpawnMethod(MobSpawnMethod);
	void setRiderRotLimit(float);
	void setRiderLockedBodyRot(float);
	void setZza(float);
	void setIsPregnant(bool);
	void setIsLayingEgg(bool);
	void isPregnant() const;
	void isLayingEgg() const;
	void getLastHurtMobTimestamp();
	void getNoActionTime() const;
	void isTransitioningSitting() const;
	void setRolling(bool);
	void getRollCounter() const;
	void snapToYBodyRot(float);
	void setInterpolation(bool);
	void setEatCounter(int);
	void setEating(bool);
	void getItemSlot(EquipmentSlot) const;
	void getEatCounter() const;
	void getBoundOrigin() const;
	void hasBoundOrigin() const;
	void getFlightSpeed();
	void setFlightSpeed(float);
	void registerAttributes();
	void getSpawnMethod();
	void isRolling() const;
	void setSpeedModifier(float);
	void _doSprintParticleEffect();
	void _loadArmor(ListTag const*);
	void _saveArmor();
	void loadOffhand(ListTag const*);
	void tickEffects();
	void _updateMobId(ActorUniqueID&);
	void loadMainhand(ListTag const*);
	void getTravelType();
	void playBornSound();
	void setSurfaceMob(bool);
	void _addSpeedBonus(mce::UUID const&, std::string const&, float);
	void _isHeadInWater();
	void playSpawnSound();
	void setBoundOrigin(BlockPos);
	void tickAttributes();
	void resetAttributes();
	void setJumpVelRedux(bool);
	void tickBlockDamage();
	void _isFloorDamaging(BlockPos const&);
	void setTargetCaptain(ActorUniqueID);
	void _removeSpeedBonus(mce::UUID const&);
	void _verifyAttributes();
	void setWantsToBeJockey(bool);
	void getFirstCaravanHead();
	void incrementArrowCount(int);
	void setNaturallySpawned(bool);
	void _getDamageAfterAbsorb(int, int);
	void _updateSprintingState();
	//void calcMoveRelativeSpeed(Mob::TravelType);
	void getCurrentSwingDuration();
	void shouldApplyWaterGravity();
	void _initHardCodedComponents();
	//void onPlayerDimensionChanged(Player*, AutomaticID<Dimension, int>);
	void calculateAmbientSoundTime(int);
	void checkTotemDeathProtection(ActorDamageSource const&);
	void getLastHurtByMobTimestamp();
	void getAmbientSoundPostponeTicksRange();
	void setXxa(float);
	void setYya(float);
	void stopAI();
	//void createAI(std::vector<GoalDefinition, std::allocator<GoalDefinition> >);
	void setYRotA(float);
	void frostWalk();
	void saveOffhand() const;
	void saveMainhand() const;
	void canPickUpLoot(ItemStack const&) const;
	void getCaravanSize() const;
	void wantsToBeJockey() const;
	void getTargetCaptain() const;
	void getVillageLegacy() const;
	void _isNewEntityAttack(ActorDamageCause) const;
	void isNaturallySpawned() const;
	void getXxa() const;
	void getYya() const;
	void getZza() const;
	void getYRotA() const;
public:
	//Objects
	static Mob * PLAYER_SWIMMING_SURFACE_OFFSET;
	static Mob * TOTAL_ROLL_STEPS;
	static Mob * DEFAULT_GRAVITY;
	static Mob * SLOW_FALL_GRAVITY;
	static Mob * LADDER_CLIMB_SPEED;
	static Mob * REMOVE_RIDERS_DELAY;
	static Mob * ABSORPTION_FACTOR_MAX;
	static Mob * ABSORPTION_FACTOR_MIN;
	static Mob * SCAFFOLDING_CLIMB_SPEED;
	static Mob * GLIDING_FALL_RESET_DELTA;
	static Mob * PLAYER_HURT_EXPERIENCE_TIME;
};//Mob
