/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

#include "Core.h"
#include "hbui.h"
#include "MatrixStack.h"

class FrameUpdateContext;
class NetworkHandler;
class ClientPlayMode;
class StoreNavigationOrigin;
class StoreCatalogItem;
class LocalPlayer;
class ScreenContext;
class AbstractScene;
class VoiceSystem;
class MoveInputHandler;
class InputMode;
class ClientInputHandler;
class BehaviorStatus;
class ActorResourceDefinitionGroup;
class TextToSpeechSystem;
class ProfanityFilterContext;
class PlayScreenDefaultTab;
class ClientInstanceState;
class GameModuleClient;
class Certificate;
class StoreCatalogItemType;
class SceneStack;
class SceneFactory;
class Vec2;
class ScreenSizeData;
class IMinecraftGame;
class IMinecraftApp;
class IApp;
class ClientInstanceEventCoordinator;
class LatencyGraphDisplay;

class ClientInstance
// : public non-virtual thunk to ClientInstance
{
public:
	//char filler_ClientInstance[UNKNOW_SIZE];
public:
	virtual ~ClientInstance();
	virtual void onInitMinecraftGame();
	virtual void onDestroyMinecraftGame();
	virtual void init(Core::FilePathManager*, NetworkHandler&, Timer&, Timer&, Social::IUserManager&, int);
	virtual void initSceneFactory(hbui::ILibrary*);
	virtual void initGraphics();
	virtual void stop();
	virtual void teardown();
	virtual void preShutDown();
	virtual void requestLeaveGame(bool, bool);
	virtual void stopPlayScreen();
	virtual void isLeaveGameDone() const;
	virtual void setupPlayScreenForLeaveGame();
	virtual void resetPrimaryClient();
	virtual void resetGameSession();
	virtual void tick();
	virtual void frameUpdate(FrameUpdateContext&);
	virtual void update(bool);
	virtual void endFrame();
	virtual void startSubClientLateJoin(bool);
	virtual void setupClientGame(std::function<void (bool)>&&, bool);
	virtual void getRegion();
	virtual void getLocalPlayer();
	virtual void getLocalPlayer() const;
	virtual void getCameraEntity() const;
	virtual void setCameraEntity(Actor*);
	virtual void getCameraTargetEntity() const;
	virtual void setCameraTargetEntity(Actor*);
	virtual void isLeavingGame() const;
	virtual void isDestroyingGame() const;
	virtual void isShuttingDown() const;
	virtual void useLowFrequencyUIRender() const;
	virtual void isSplitScreenActive() const;
	virtual void isVRClient() const;
	virtual void isARClient() const;
	virtual void isARVRClient() const;
	virtual void isHoloviewerMode() const;
	virtual void isHoloscreenMode() const;
	virtual void isLivingroomMode() const;
	virtual void isExitingLevel() const;
	virtual void isNotVLRMode() const;
	virtual void isHoloRealityMode() const;
	virtual void isRealityFullVRMode() const;
	virtual void isInBedScreen() const;
	virtual void isKeyboardEnabled() const;
	virtual void isVRTransitioning() const;
	virtual void hasCommands() const;
	virtual void isScriptingEnabled() const;
	virtual void getHoloviewerScale() const;
	virtual void getSplitScreenCount() const;
	virtual void isStereoRendering() const;
	virtual void isPlatformNX() const;
	virtual void isLocalSplitscreenWith(ActorUniqueID const&) const;
	virtual void isValidCrossPlatformSkin() const;
	virtual void getSplitScreenInfo() const;
	virtual void getCurrentMaxGUIScaleIndex() const;
	virtual void getRealityModeFrameFactor() const;
	virtual void setRealityModeFrameFactor(float const&);
	virtual void getRealityModeToggleTriggered() const;
	virtual void setRealityModeToggleTriggered(bool);
	virtual void getHandlingControllerDisconnect();
	virtual void setOpenControllerDisconnectScreen(bool);
	virtual void getClientPlayMode() const;
	virtual void setClientPlayMode(ClientPlayMode const&);
	virtual void getLivingRoomForCredits() const;
	virtual void setLivingRoomForCredits(bool);
	virtual void getCreditsCallback();
	virtual void setCreditsCallback(std::function<void ()>);
	virtual void setupTransitionForCredits(std::function<void ()>);
	virtual void refreshScreenSizeData();
	virtual void onScreenSizeChanged(int, int, float);
	virtual void onGuiScaleOffsetChanged();
	virtual void onSafeZoneChanged();
	virtual void quit(std::string const&, std::string const&);
	virtual void getMinecraftGame() const;
	virtual void getAutomationClient() const;
	virtual void getScreenshotStreamer() const;
	virtual void getEventing() const;
	virtual void getFontHandle() const;
	virtual void getRuneFontHandle() const;
	virtual void getUnicodeFontHandle() const;
	virtual void getGeometryGroup() const;
	virtual void getMultiplayerServiceManager() const;
	virtual void getLocalServerLevel();
	virtual void getResourcePackRepository() const;
	virtual void getResourcePackManager() const;
	virtual void getPackManifestFactory();
	virtual void getKeyProvider();
	virtual void getResourcePacksInfoData();
	virtual void getSkinRepository() const;
	virtual void getSkinRepositoryClientInterface() const;
	virtual void getPersonaRepository() const;
	virtual void getTextures() const;
	virtual void getStoreCacheTextures() const;
	virtual void getMinecraftGraphics() const;
	virtual void getUIRepository() const;
	virtual void getUserManager() const;
	virtual void wantToQuit() const;
	virtual void isPrimaryLevelCrossPlatformMultiplayer() const;
	virtual void isPrimaryLevelMultiplayer() const;
	virtual void isAdhocEnabled() const;
	virtual void linkToOffer(std::string const&, bool, std::string const&, StoreNavigationOrigin);
	virtual void linkToAllOffers(std::string const&, std::string const&, bool, std::string const&, bool);
	virtual void navigateToBrazeScreen(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&);
	virtual void navigateToStoreHomeScreen();
	virtual void navigateToCoinPurchaseScreen(int, std::function<void ()>);
	virtual void navigateToPurchaseOfferScreen(StoreCatalogItem&, StoreNavigationOrigin, bool);
	virtual void navigateToOfferCollectionScreen(StoreCatalogItem&);
	virtual void navigateToStoreSeeAllByCreatorScreen(std::string const&, bool);
	virtual void navigateToServersScreen(bool);
	virtual void navigateToHowToPlayScreen(std::string const&);
	virtual void tryPushLeaveGameScreen();
	virtual void tryStartDayOneExperience();
	virtual void isReadyToRender() const;
	virtual void onDimensionChanged();
	virtual void onGameEventNotification(ui::GameEventNotification);
	virtual void getTopScreenName() const;
	virtual void setLeaveGameInProgressAsReadyToContinue();
	virtual void stopDestroying();
	virtual void onClientCreatedLevel(std::unique_ptr<Level, std::default_delete<Level> >, std::unique_ptr<LocalPlayer, std::default_delete<LocalPlayer> >);
	virtual void getClientRandomId() const;
	virtual void getUserAuthentication();
	virtual void getWeakUserAuthentication();
	virtual void registerToUserManager(Social::IUserManager&, int);
	virtual void resumeWithUserManager(Social::IUserManager&, int);
	virtual void createUserAuthentication(std::string);
	virtual void createUserAuthentication(unsigned long long, std::string const&);
	virtual void getPlatformId() const;
	virtual void getPlatformOnlineId() const;
	virtual void isHoloCursorNeeded() const;
	virtual void useController() const;
	virtual void useTouchscreen() const;
	virtual void getMouseGrabbed() const;
	virtual void currentInputModeIsGamePadOrMotionController() const;
	virtual void currentInputModeIsMouseAndKeyboard() const;
	virtual void getForceMonoscopic() const;
	virtual void allowPicking() const;
	virtual void isShowingMenu() const;
	virtual void isShowingProgressScreen() const;
	virtual void isScreenReplaceable() const;
	virtual void isInGame() const;
	virtual void isInRealm();
	virtual void readyForShutdown() const;
	virtual void isPrimaryClient() const;
	virtual void isEduMode() const;
	virtual void isGamepadCursorEnabled() const;
	virtual void getServerData();
	virtual void getServerData() const;
	virtual void getLevel();
	virtual void getLevel() const;
	virtual void isPreGame() const;
	virtual void isInMultiplayerGame() const;
	virtual void isMultiPlayerClient() const;
	virtual void getOptions();
	virtual void getOptions() const;
	virtual void getOptionsPtr();
	virtual void getUser();
	virtual void getUser() const;
	virtual void getGameRenderer() const;
	virtual void getHolosceneRenderer() const;
	virtual void getLevelRenderer() const;
	virtual void getLevelRendererCameraProxy() const;
	virtual void getCameraManager();
	virtual void getCameraManager() const;
	virtual void getLightTexture();
	virtual void setupLevelRendering(Level&, Actor&);
	virtual void getViewportInfo() const;
	virtual void setViewportInfo(mce::ViewportInfo const&);
	virtual void getNormalizedViewportSize() const;
	virtual void updateChunkRadius();
	virtual void setUITexture(mce::Texture*);
	virtual void getUITexture();
	virtual void setLevelTexture(mce::Texture*);
	virtual void getLevelTexture();
	virtual void setUICursorTexture(mce::TexturePtr);
	virtual void getUICursorTexture() const;
	virtual void getCamera();
	virtual void getShaderColor();
	virtual void getDarkShaderColor();
	virtual void clearGraphicsCache();
	virtual void getNormalizedUICursorTransform(MatrixStack::MatrixStackRef&, float);
	virtual void shouldRenderUICursor() const;
	virtual void getRenderPlayerModel() const;
	virtual void getCameraFacesPlayerFront() const;
	//virtual void onLatencyUpdated(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&);
	virtual void getGuiScale() const;
	virtual void getGuiScaleOption() const;
	virtual void getGuiScaleOffset() const;
	virtual void setGuiScaleOffset(int);
	virtual void renderImGui(ScreenContext&, bool);
	virtual void getGuiData();
	virtual void getGuiData() const;
	virtual void getGuidedFlowManager();
	virtual void getDpadScale() const;
	virtual void getDateManager() const;
	virtual void addOverrideHoursToDateTime(unsigned int);
	virtual void getToastManager();
	virtual void getTopScene();
	virtual void getTopScene() const;
	virtual void getActiveScene();
	virtual void getActiveScene() const;
	virtual void getSceneFactory() const;
	virtual void getClientSceneStack() const;
	virtual void getClientSceneStack();
	virtual void getMainSceneStack();
	virtual void getMainSceneStack() const;
	virtual void getCurrentSceneStack() const;
	virtual void getCurrentSceneStack();
	virtual void getCurrentUIRouter();
	virtual void getCurrentUIRouter() const;
	virtual void prepareSceneFor(ui::SceneType, std::function<std::shared_ptr<AbstractScene> ()>);
	virtual void getCachedScenes();
	virtual void getScreenName() const;
	virtual void getScreenTelemetry() const;
	virtual void getTopSceneType() const;
	virtual void getMobEffectsLayout();
	virtual void onMobEffectsChange();
	virtual void setUISizeAndScale(int, int, float);
	virtual void forEachVisibleScreen(std::function<void (AbstractScene&)>, bool);
	virtual void forEachScreen(std::function<bool (AbstractScene&)>, bool);
	virtual void forEachScreenConst(std::function<bool (AbstractScene const&)>, bool) const;
	virtual void updateSceneStack();
	virtual void forEachAlwaysAcceptInputScreen(std::function<void (AbstractScene&)>, AbstractScene const*);
	virtual void forEachAlwaysAcceptInputScreenWithTop(std::function<void (AbstractScene&)>);
	virtual void showPlayerProfile(std::string const&, mce::UUID);
	virtual void getCurrentInputMode() const;
	virtual void isTouchGameplayAllowed() const;
	virtual void getMinecraftInput() const;
	virtual void setHoloInput(std::unique_ptr<HolographicPlatform, std::default_delete<HolographicPlatform> >);
	virtual void getHoloInput() const;
	virtual void getVoiceSystem() const;
	virtual void getKeyboardManager();
	virtual void setVoiceSystem(std::unique_ptr<VoiceSystem, std::default_delete<VoiceSystem> >);
	virtual void setLastPointerLocation(float, float, float);
	virtual void getLastPointerLocation();
	virtual void shouldUseLastPointerLocationOnFocusChange();
	virtual void adjustGazeCursorByMouse(float, float);
	virtual void currentScreenShouldStealMouse();
	virtual void getInProgressBAI() const;
	virtual void newDictationDataAvailable() const;
	virtual void clearDictationDataAvailable();
	virtual void getDictationText() const;
	virtual void getPacketSender();
	virtual void getClientNetworkSystem();
	virtual void getClientNetworkSystem() const;
	virtual void setMoveTurnInput(std::unique_ptr<MoveInputHandler, std::default_delete<MoveInputHandler> >);
	virtual void getMoveTurnInput();
	virtual void setupPersistentControls(InputMode);
	virtual void resetPlayerMovement();
	virtual void onClientInputInitComplete();
	virtual void setClientInputHandler(std::unique_ptr<ClientInputHandler, std::default_delete<ClientInputHandler> >);
	virtual void getInput() const;
	virtual void getControllerId() const;
	virtual void hasConnectedController() const;
	virtual void getClientSubId() const;
	virtual void setSuspendInput(bool);
	virtual void setDisableInput(bool);
	virtual void grabMouse();
	virtual void releaseMouse();
	virtual void refocusMouse();
	virtual void resetBai(int);
	virtual void clearInProgressBAI();
	virtual void tickBuildAction();
	virtual void getSoundEngine() const;
	virtual void play(std::string const&, Vec3 const&, float, float);
	virtual void playUI(std::string const&, float, float);
	virtual void muteAudio();
	virtual void unMuteAudio();
	virtual void fadeOutMusic() const;
	virtual void getTaskGroup();
	virtual void onFullVanillaPackOnStack();
	virtual void isFullVanillaPackOnStack() const;
	virtual void onPlayerLoaded(Player&);
	virtual void setClientGameMode(GameType);
	virtual void resetToDefaultGameMode();
	virtual void connectToThirdParyServer(std::string const&, std::string const&, int);
	virtual void startExternalNetworkWorld(Social::GameConnectionInfo, std::string const&, bool);
	virtual void checkForPiracy();
	virtual void updateChatFilterStatus();
	virtual void setBehaviorCommandCallback(std::function<void (std::string const&, BehaviorStatus)>);
	virtual void setBehaviorCommandStatus(std::string, BehaviorStatus);
	virtual void requestScreenshot(ScreenshotOptions&);
	virtual void getDevConsoleLogger() const;
	virtual void requestImageFromUrl(std::string const&, std::function<void (Core::Path const&)>);
	virtual void initializeRenderResources();
	virtual void postInitRenderResources();
	virtual void onAppSuspended();
	virtual void onActiveResourcePacksChanged(ActorResourceDefinitionGroup const&);
	virtual void reloadEntityRenderers(ActorResourceDefinitionGroup const&);
	virtual void getBlockTessellator();
	virtual void getBlockEntityRenderDispatcher();
	virtual void getEntityRenderDispatcher();
	virtual void getEntityBlockRenderer();
	virtual void getItemInHandRenderer();
	virtual void getItemRenderer();
	virtual void getSentMessageHistory();
	virtual void getUIProfanityContext() const;
	virtual void initTTSClient(TextToSpeechSystem&);
	virtual void getTTSClient();
	virtual void getTTSClient() const;
	virtual void getTTSEventManager();
	virtual void addTTSMessage(std::string const&, ProfanityFilterContext, bool, bool, bool);
	virtual void initCommands();
	virtual void getUserId() const;
	virtual void getServerConnectionTime() const;
	virtual void getHMDState();
	virtual void getHMDState() const;
	virtual void setServerPingTime(int);
	virtual void getServerPingTime() const;
	virtual void setDefaultPlayscreenTab(PlayScreenDefaultTab);
	virtual void setClientInstanceState(ClientInstanceState const&);
	virtual void setUIEventCoordinator(std::unique_ptr<UIEventCoordinator, std::default_delete<UIEventCoordinator> >&&);
	virtual void getUIEventCoordinator();
	virtual void getEventCoordinator();
	virtual void computeScreenCoordsFromScreenNormCoords(float, float, short&, short&);
	virtual void getNoBlockBreakUntil();
	//virtual void setNoBlockBreakUntil(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >);
	virtual void setDictation(std::string const&);
	virtual void setNewDictationString(bool);
	virtual void setGameModule(std::unique_ptr<GameModuleClient, std::default_delete<GameModuleClient> >);
	virtual void getGameModule();
	virtual void getGameCallbacks();
	virtual void getStorageAreaStateListener();
	virtual void getScriptEngine();
	virtual void sendClientEnteredLevel();
	virtual void getHitDetectSystem();
	virtual void isPlaying() const;
	virtual void getLatencyGraphDisplay() const;
	virtual void onExtendDiskSpace(bool, std::weak_ptr<Core::FileStorageArea>&, unsigned long long const&, std::function<void ()>);
	virtual void onLowDiskSpace(bool);
	virtual void onOutOfDiskSpace(bool);
	virtual void onCriticalDiskError(bool, Core::LevelStorageState const&);
	virtual void onLevelCorrupt();
	virtual void onGameModeChanged();
	virtual void onTick(int, int);
	virtual void onInternetUpdate();
	virtual void onGameSessionReset();
	virtual void onLevelExit();
	virtual void updateScreens();
public:
	ClientInstance(IMinecraftGame&, IMinecraftApp&, IApp&, LevelListener&, unsigned char, ClientInstanceEventCoordinator&, LatencyGraphDisplay*);
	void _initSceneStack();
	void _startLeaveGame();
	void _removeSubclient();
	void _joinWorldInProgress();
	void _loadProfanityFilter();
	void _startDestroyingGame();
	void _startWorldSubClient(std::unique_ptr<Certificate, std::default_delete<Certificate> >);
	void _createNetworkHandler(std::unique_ptr<Certificate, std::default_delete<Certificate> >);
	void _finishDestroyingGame();
	void getHitEventCoordinator();
	void _continueDestroyingGame();
	void _startWorldPrimaryClient(std::unique_ptr<Certificate, std::default_delete<Certificate> >);
	void _fetchStoreItemByProductId(std::string const&, StoreCatalogItemType);
	void _navigateToStoreHomeScreen(SceneStack&, SceneFactory&);
	void _startExternalNetworkWorld(Social::GameConnectionInfo, std::string const&);
	void _updateScreenSizeVariables(Vec2 const&, float, float, float);
	void _navigateToDisconnectScreen(std::string const&, std::string const&, bool);
	void _onScreenSizeVariablesChanged(ScreenSizeData const&);
	void _processNewGazeHoloScreenData();
	void _leaveGameOnUnrecoverableError(std::string const&, std::string const&);
	void _createSkinRepositoryClientInterface();
	void _fetchItemAndNavigateToPurchaseScreen(std::string const&, std::string const&, StoreNavigationOrigin, bool);
	void _needsAsyncLateJoin() const;
	void _getViewPortModifiers(Vec2&, Vec2&) const;
	void _calculateGuiScaleIndex(Vec2 const&, int) const;
	void _calculateMaxGuiScaleIndex(Vec2 const&) const;
	void _getSceneStackChangedThisFrame() const;
};
