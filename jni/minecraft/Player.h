/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

class ActorLocation;
class Vec3;
class ChunkSource;
class CommandPermissionLevel;
class ChalkboardBlockActor;
class TextObjectRoot;
class EventPacket;
class CooldownType;
class PacketSender;
class ItemGroup;
class PlayerUISlot;
class ItemInstance;
class AbilitiesIndex;
class PlayerListener;
class IContainerManager;
class Agent;
class BuildPlatform;
class ShieldItem;
class ContainerID;
class BlockSource;

class Player
{
public:
	//char filler_Player[UNKNOW_SIZE];
public:
	virtual ~Player();
	//virtual void reloadHardcoded(Actor::InitializationMethod, VariantParameterList const&);
	//virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
	virtual void remove();
	virtual void getAttachPos(ActorLocation, float) const;
	virtual void move(Vec3 const&);
	virtual void teleportTo(Vec3 const&, bool, int, int);
	virtual void getAddPacket();
	virtual void normalTick();
	virtual void getRidingHeight();
	virtual void getFormattedNameTag() const;
	virtual void getAlwaysShowNameTag() const;
	virtual void getCameraOffset() const;
	virtual void isImmobile() const;
	virtual void isSleeping() const;
	virtual void isShootable();
	virtual void isBlocking() const;
	virtual void isDamageBlocked(ActorDamageSource const&) const;
	virtual void isCreativeModeAllowed();
	virtual void attack(Actor&);
	virtual void adjustDamageAmount(int&) const;
	virtual void isJumping() const;
	virtual void isInvulnerableTo(ActorDamageSource const&) const;
	virtual void actuallyHurt(int, ActorDamageSource const*, bool);
	virtual void onBounceStarted(BlockPos const&, Block const&);
	virtual void feed(int);
	virtual void handleEntityEvent(ActorEvent, int);
	virtual void awardKillScore(Actor&, int);
	virtual void setArmor(ArmorSlot, ItemStack const&);
	virtual void getCarriedItem() const;
	virtual void setCarriedItem(ItemStack const&);
	virtual void setOffhandSlot(ItemStack const&);
	virtual void getEquippedTotem() const;
	virtual void consumeTotem();
	virtual void getEntityTypeId() const;
	virtual void getPortalCooldown() const;
	virtual void getPortalWaitTime() const;
	virtual void onSynchedDataUpdate(int);
	virtual void canAddRider(Actor&) const;
	virtual void canBePulledIntoVehicle() const;
	virtual void sendMotionPacketIfNeeded();
	virtual void startSwimming();
	virtual void stopSwimming();
	virtual void getCommandPermissionLevel() const;
	virtual void useItem(ItemStack&, ItemUseMethod, bool);
	virtual void getMapDecorationRotation() const;
	virtual void isWorldBuilder();
	virtual void isCreative() const;
	virtual void isAdventure() const;
	virtual void add(ItemStack&);
	virtual void drop(ItemStack const&, bool);
	virtual void startSpinAttack();
	virtual void stopSpinAttack();
	virtual void die(ActorDamageSource const&);
	virtual void _hurt(ActorDamageSource const&, int, bool, bool);
	virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void onSizeUpdated();
	virtual void setSleeping(bool);
	virtual void getSpeed() const;
	virtual void setSpeed(float);
	virtual void travel(float, float, float);
	virtual void aiStep();
	virtual void getItemUseDuration();
	virtual void getItemUseStartupProgress();
	virtual void getItemUseIntervalProgress();
	virtual void getAllHand() const;
	virtual void getAllEquipment() const;
	virtual void sendInventory(bool);
	virtual void canExistWhenDisallowMob() const;
	virtual void useNewAi() const;
	virtual void initBodyControl();
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void getExperienceReward() const;
	virtual void dropEquipment(ActorDamageSource const&, int);
	virtual void dropEquipment();
	virtual void updateGliding();
	virtual void prepareRegion(ChunkSource&);
	virtual void destroyRegion();
	virtual void suspendRegion();
	virtual void _fireWillChangeDimension();
	virtual void _fireDimensionChanged();
	//virtual void changeDimensionWithCredits(AutomaticID<Dimension, int>);
	virtual void tickWorld(Tick const&);
	virtual void getTickingOffsets() const;
	virtual void moveView();
	virtual void moveSpawnView(Vec3 const&);
	virtual void setName(std::string const&);
	virtual void checkMovementStats(Vec3 const&);
	virtual void getCurrentStructureFeature() const;
	virtual void respawn();
	virtual void resetRot();
	virtual void resetPos(bool);
	virtual void isInTrialMode();
	virtual void hasResource(int);
	virtual void completeUsingItem();
	virtual void setPermissions(CommandPermissionLevel);
	virtual void startCrafting(BlockPos const&, bool);
	virtual void startStonecutting(BlockPos const&);
	virtual void startDestroying();
	virtual void stopDestroying();
	virtual void openContainer(BlockPos const&);
	virtual void openContainer(ActorUniqueID const&);
	virtual void openFurnace(BlockPos const&);
	virtual void openBlastFurnace(BlockPos const&);
	virtual void openSmoker(BlockPos const&);
	virtual void openEnchanter(BlockPos const&);
	virtual void openAnvil(BlockPos const&);
	virtual void openGrindstone(BlockPos const&);
	virtual void openBrewingStand(BlockPos const&);
	virtual void openHopper(BlockPos const&);
	virtual void openHopper(ActorUniqueID const&);
	virtual void openDispenser(BlockPos const&, bool);
	virtual void openBeacon(BlockPos const&);
	virtual void openPortfolio();
	virtual void openBook(int, bool, int, BlockActor*);
	virtual void openCommandBlock(BlockPos const&);
	virtual void openCommandBlockMinecart(ActorUniqueID const&);
	virtual void openHorseInventory(ActorUniqueID const&);
	virtual void openTrading(ActorUniqueID const&, bool);
	virtual void canOpenContainerScreen();
	virtual void openChalkboard(ChalkboardBlockActor&, bool);
	virtual void openNpcInteractScreen(Actor&);
	virtual void openInventory();
	virtual void openStructureEditor(BlockPos const&);
	virtual void openLabTable(BlockPos const&);
	virtual void openElementConstructor(BlockPos const&);
	virtual void openCompoundCreator(BlockPos const&);
	virtual void openMaterialReducer(BlockPos const&);
	virtual void openLoom(BlockPos const&);
	virtual void openStonecutter(BlockPos const&);
	virtual void openCartographyTable(BlockPos const&);
	virtual void displayChatMessage(std::string const&, std::string const&);
	virtual void displayClientMessage(std::string const&);
	//virtual void displayLocalizableMessage(std::string const&, std::vector<std::string, std::allocator<std::string> > const&);
	virtual void displayTextObjectMessage(TextObjectRoot const&, std::string const&, std::string const&);
	virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
	virtual void startSleepInBed(BlockPos const&);
	virtual void stopSleepInBed(bool, bool);
	virtual void canStartSleepInBed();
	virtual void getSleepTimer() const;
	virtual void getPreviousTickSleepTimer() const;
	virtual void openSign(BlockPos const&);
	virtual void isLocalPlayer() const;
	virtual void isHostingPlayer() const;
	virtual void isLoading() const;
	virtual void isPlayerInitialized() const;
	virtual void stopLoading();
	virtual void registerTrackedBoss(ActorUniqueID);
	virtual void unRegisterTrackedBoss(ActorUniqueID);
	virtual void setPlayerGameType(GameType);
	virtual void _crit(Actor&);
	virtual void getEventing() const;
	virtual void getUserId() const;
	virtual void sendEventPacket(EventPacket&) const;
	virtual void addExperience(int);
	virtual void addLevels(int);
	virtual void inventoryChanged(Container&, int, ItemStack const&, ItemStack const&);
	virtual void deleteContainerManager();
	virtual void setFieldOfViewModifier(float);
	//virtual void isPositionRelevant(AutomaticID<Dimension, int>, BlockPos const&);
	virtual void isEntityRelevant(Actor const&);
	virtual void onSuspension();
	virtual void onLinkedSlotsChanged();
	virtual void startCooldown(Item const*);
	virtual void getItemCooldownLeft(CooldownType) const;
	virtual void isItemInCooldown(CooldownType) const;
	virtual void sendNetworkPacket(Packet&) const;
	virtual void onMovePlayerPacketNormal(Vec3 const&, Vec2 const&, float);
public:
	Player(Level&, PacketSender&, GameType, NetworkIdentifier const&, unsigned char, mce::UUID, std::string const&, std::unique_ptr<Certificate, std::default_delete<Certificate> >, std::string const&, std::string const&);
	void stopGliding();
	void startGliding();
	void isUsingItem() const;
	void setSelectedItem(ItemStack const&);
	void getSelectedItem() const;
	void crackBlock(BlockPos const&, unsigned char);
	void onResetBAI(int);
	void getClientSubId() const;
	void getSupplies() const;
	void getUnmappedPlayerGameType();
	void setCursorSelectedItemGroup(ItemGroup const&);
	void isOperator() const;
	void getClientId() const;
	void getPlayerGameType() const;
	void getPlayerPermissionLevel() const;
	void getInteractText() const;
	void updateSkin(SerializedSkin const&, int);
	void getPlayerUIItem(PlayerUISlot);
	void setPlayerUIItem(PlayerUISlot, ItemStack const&);
	void onMobStatusChanged(ActorUniqueID);
	void setEnchantmentSeed(int);
	void setRespawnPosition(BlockPos const&, bool);
	void getContainerManager();
	void setPlatformOnlineId(std::string const&);
	void clearCreativeItemList();
	//void handleMovePlayerPacket(Player::PositionMode, Vec3 const&, Vec2 const&, float, int, int);
	void setTeleportDestination(Vec3 const&);
	//void updateCreativeItemList(std::vector<ItemInstance, std::allocator<ItemInstance> > const&);
	void getSkin();
	void stopUsingItem();
	void setChunkRadius(unsigned int);
	void checkNeedAutoJump(float, float);
	void getTicksUsingItem();
	//void setRespawnDimensionId(AutomaticID<Dimension, int>);
	void updateInventoryTransactions();
	void _setStartedBlockingTimeStamp(long long);
	void getAgentID() const;
	void getItemInUse() const;
	void canUseAbility(AbilitiesIndex) const;
	void getChunkRadius() const;
	void startUsingItem(ItemStack const&, int);
	void getSleepRotation() const;
	void getBlockedUsingDamagedShieldTimeStamp() const;
	void getSelectedItemSlot() const;
	void getBlockingStartTimeStamp() const;
	void addListener(PlayerListener&);
	void removeListener(PlayerListener&);
	void setUnderwaterLightLevel(float);
	void getUnderwaterLightLevel() const;
	void getTrackedBosses();
	void getOnScreenAnimationTicks() const;
	void getCurrentOnScreenAnimationEffectID() const;
	void isChatAllowed();
	void getHudContainerManagerModel();
	void getPlayerLevel() const;
	void forceAllowEating() const;
	void getLevelProgress() const;
	void isHungry() const;
	void getBlockedUsingShieldTimeStamp() const;
	void setLastHurtBy(ActorType);
	void setAllPlayersSleeping();
	void resetOnScreenAnimationTicks();
	void queueOnScreenTextureAnimation(unsigned int);
	void isSpawned() const;
	void canUseOperatorBlocks() const;
	void isBouncing() const;
	void getPlatform() const;
	void isHiddenFrom(Mob&) const;
	void getCertificate() const;
	void getPlatformOnlineId() const;
	void getSkin() const;
	void getSpawnPosition();
	void handleJumpEffects();
	void updateTeleportDestPos();
	void resetToDefaultGameMode();
	void isForcedRespawn() const;
	void isInCreativeMode() const;
	void getEnchantmentSeed() const;
	void getAgentIfAllowed(bool, ActorUniqueID) const;
	void isSleepingLongEnough() const;
	void setContainerManager(std::shared_ptr<IContainerManager>);
	void getCurrentActiveShield() const;
	void getXpNeededForNextLevel() const;
	void getXpNeededForLevelRange(int, int) const;
	void getAgent() const;
	void getCapePos(float);
	void setAgent(Agent*);
	void getUsedPotion();
	void setUsedPotion(bool);
	void spawnExperienceOrb(Vec3 const&, int);
	void take(Actor&, int, int);
	void getLuck();
	void isSurvival() const;
	void _addLevels(int);
	void getMapIndex();
	void setMapIndex(int);
	void setPlatform(BuildPlatform);
	void _tickCooldowns();
	void setPlayerIndex(int);
	void getAttackDamage();
	void _applyExhaustion(Vec3 const&);
	void releaseUsingItem();
	void resetPlayerLevel();
	void _blockUsingShield(ActorDamageSource const&, float);
	void _updateInteraction();
	void registerAttributes();
	void causeFoodExhaustion(float);
	//void setRespawnDimension(AutomaticID<Dimension, int>);
	void updateTrackedBosses();
	void _chooseSpawnPosition();
	void clearRespawnPosition();
	void recheckSpawnPosition();
	void setDefaultHeadHeight();
	void getNewEnchantmentSeed();
	void setBedRespawnPosition(BlockPos const&);
	void setCursorSelectedItem(ItemStack const&);
	void _validateSpawnPosition();
	void dropCursorSelectedItem();
	void _sendShieldUpdatePacket(ShieldItem const*, ItemStack const&, ItemStack const&, ContainerID, int);
	void _ensureSafeSpawnPosition(Vec3&);
	void _fixup4JBedSpawnPosition(Vec3&);
	void _registerElytraLoopSound();
	//void fireDimensionChangedEvent(AutomaticID<Dimension, int>);
	//void _findFallbackSpawnPosition(Vec3&, std::vector<BlockSource*, std::allocator<BlockSource*> >, unsigned int, unsigned int);
	void getStandingPositionOnBlock(BlockPos const&);
	void setUntrackedInteractionUIItem(int, ItemStack const&);
	void _handleCarriedItemInteractText();
	void _setBlockedUsingShieldTimeStamp(long long);
	void clearUntrackedInteractionUIContainer(int);
	void _setBlockedUsingDamagedShieldTimeStamp(long long);
	void eat(ItemStack const&);
	void eat(int, float);
	void _touch(Actor&);
	void isHurt();
	void checkBed(bool);
	void getScore();
	void interact(Actor&, Vec3 const&);
	void moveCape();
	void tickArmor();
	void canDestroy(Block const&) const;
	void getDirection() const;
	void getLastHurtBy() const;
	void canBeSeenOnMap() const;
	void getPlayerIndex() const;
	void getDestroySpeed(Block const&) const;
	//void fixSpawnPosition(Vec3&, std::vector<BlockSource*, std::allocator<BlockSource*> >) const;
	void hasOpenContainer() const;
	//void _readyToCheckSpawn(Vec3 const&, std::vector<BlockSource*, std::allocator<BlockSource*> > const&) const;
	void getDestroyProgress(Block const&) const;
	void getSkinAdjustments() const;
	void hasRespawnPosition() const;
	void getCreativeItemList() const;
	void getItemInteractText(Item const&) const;
	void _getItemDestroySpeed(Block const&) const;
	//void fixStartSpawnPosition(BlockPos&, std::vector<BlockSource*, std::allocator<BlockSource*> >) const;
	void getFilteredCreativeItemList() const;
	void isInRaid() const;
	void isViewer() const;
public:
	static Player * PLAYER_SWIM_BREACH_ANGLE;
	static Player * PLAYER_SWIM_ENTER_THRESHOLD;
	static Player * HUNGER;
	static Player * DEFAULT_PLAYER_HEIGHT_OFFSET;
	static Player * DISTANCE_TO_TRAVELLED_EVENT;
	static Player * PLAYER_UP_SWIM_SPEED;
	static Player * PLAYER_SWIM_FLY_MULTI;
	static Player * PLAYER_DOWN_SWIM_SPEED;
	static Player * PLAYER_SWIMMING_CAMERA_OFFSET;
	static Player * PLAYER_SNEAK_OFFSET;
	static Player * PLAYER_GLIDING_CAMERA_OFFSET;
	static Player * EXPERIENCE;
	static Player * LEVEL;
	static Player * SATURATION;
	static Player * GLIDE_STOP_DELAY;
	static Player * DISTANCE_TO_TRANSFORM_EVENT;
	static Player * EXHAUSTION;
	static Player * DEFAULT_BB_WIDTH;
	static Player * DEFAULT_BB_HEIGHT;
	static Player * DEFAULT_FLY_SPEED;
	static Player * INVALID_SPAWN_POS;
	static Player * DEFAULT_WALK_SPEED;
	static Player * PLAYER_SLEEPING_CAMERA_OFFSET;
	static Player * UNTRACKED_INTERACTION_SLOT_COUNT;
};
