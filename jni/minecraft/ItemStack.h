/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

class RecipeIngredient;

class ItemStack
{
public:
	//char filler_ItemStack[UNKNOW_SIZE];
public:
	ItemStack(ItemStack const&);
	ItemStack();
	ItemStack(ItemInstance const&);
	ItemStack(Item const&);
	ItemStack(Item const&, int);
	ItemStack(Item const&, int, int);
	ItemStack(BlockLegacy const&, int);
	ItemStack(Block const&, int, CompoundTag const*);
	ItemStack(Item const&, int, int, CompoundTag const*);
	ItemStack(RecipeIngredient const&);
	~ItemStack();
	void isNull() const;
	void getHoverName() const;
	void getEffectName() const;
	void set(int);
	void operator=(ItemStack const&);
	void getId() const;
	void setNull();
	void isThrowable() const;
	void getStrippedNetworkItem() const;
	void operator==(ItemStack const&) const;
	void operator!=(ItemStack const&) const;
	void getMaxUseDuration() const;
	void getAuxValue() const;
	void getLegacyBlock() const;
	void hasChargedItem() const;
	void getUseAnimation() const;
	void isBlock() const;
	void getUserData() const;
	void isArmorItem() const;
	void getDescriptor() const;
	void isGlint() const;
	void isEnchanted() const;
	void getMaxDamage() const;
	void getDamageValue() const;
	void getPickupPopPercentage() const;
	void getIcon(int, bool) const;
	void getBlock() const;
	void isDamaged() const;
	void hasUserData() const;
	void getColor() const;
	void getChargedItem() const;
	void isStackedByData() const;
	void isLiquidClipItem() const;
	void matchesItem(ItemStack const&) const;
	void isStackable(ItemStack const&) const;
	void getPickupTime() const;
	void showsDurabilityInCreative() const;
	void matches(ItemStack const&) const;
	void matchesItem(ItemInstance const&) const;
	void getFormattedHovertext(Level&, bool) const;
	void getRendererId() const;
	void setUserData(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> >);
	void setShowPickUp(bool);
	//void setPickupTime(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >);
	void setChargedItem(ItemInstance const&, bool);
	void retrieveIDFromIDAux(int);
	void retrieveAuxValFromIDAux(int);
	void retrieveEnchantFromIDAux(int);
	void isInstance(BlockLegacy const&) const;
	void getIsValidPickupTime() const;
	void remove(int);
	void getMaxStackSize() const;
	void isDamageableItem() const;
	void addCustomUserData(BlockActor&, BlockSource&);
	void getName() const;
	void fromTag(CompoundTag const&);
	void getBlockingTick() const;
	void getDescriptionId() const;
	void playSoundIncrementally(Mob&) const;
	void clone() const;
	void getRawNameId() const;
	void isHorseArmorItem() const;
	void add(int);
	void isOffhandItem() const;
	void getAttackDamage() const;
	void getIdAux() const;
	void sameItem(ItemStack const&) const;
	void clearChargedItem();
	void canBeCharged() const;
	void sameItemAndAuxAndBlockData(ItemStack const&) const;
	void isWearableItem() const;
	void setDamageValue(short);
	void load(CompoundTag const&);
	void isExplodable() const;
	void save() const;
	void hurtAndBreak(int, Actor*);
	void fromTag(CompoundTag const&, Level&);
	void getEnchantsFromUserData() const;
	void inventoryTick(Level&, Actor&, int, bool);
	void releaseUsing(Player*, int);
	void useTimeDepleted(Level*, Player*);
	void startCoolDown(Player*) const;
	void getDestroySpeed(Block const&) const;
	void canDestroySpecial(Block const&) const;
	void setAuxValue(short);
	void getIdAuxEnchanted() const;
	void matches(ItemInstance const&) const;
	void getEnchantValue() const;
	void setCustomName(std::string const&);
	void setRepairCost(int);
	void resetHoverName();
	void isEnchantingBook() const;
	void getBaseRepairCost() const;
	void hasCustomHoverName() const;
	void getCustomName() const;
	void removeEnchants();
	void isPattern() const;
	void sameItemAndAux(ItemStack const&) const;
	void refreshedInContainer(Level&);
	void use(Player&);
	void useOn(Actor&, int, int, int, unsigned char, float, float, float);
	void mineBlock(Block const&, int, int, int, Mob*);
	void setPickupTime();
	void componentsMatch(ItemStack const&) const;
	void hasSameAuxValue(ItemStack const&) const;
	void hasSameUserData(ItemStack const&) const;
	void toString() const;
	void saveEnchantsToUserData(ItemEnchants const&);
	void deserializeComponents(IDataInput&);
	void serializeComponents(IDataOutput&) const;
	void addComponents(Json::Value const&, std::string&);
	//void setCustomLore(std::vector<std::string, std::allocator<std::string> > const&);
	void setJustBrewed(bool);
	void _initComponents();
	void _loadComponents(CompoundTag const&);
	void _setChargedItem(ItemInstance const&);
	void setBlockingTick(Tick);
	void updateComponent(std::string const&, Json::Value const&);
	void _cloneComponents(ItemInstance const&);
	void _cloneComponents(ItemStack const&);
	void isValidComponent(std::string const&);
	void _updateCompareHashes();
	void _makeChargedItemFromUserData();
	void init(BlockLegacy const&, int);
	void init(Item const&, int, int, CompoundTag const*);
	void init(int, int, int);
	void load(CompoundTag const&, Level&);
	void snap(Player*);
	void _setItem(int);
	void setBlock(Block const*);
	void _loadItem(CompoundTag const&);
	void useAsFuel();
	void canDestroy(Block const*) const;
	void canPlaceOn(Block const*) const;
	void isFullStack() const;
	void isStackable() const;
	void hasComponent(std::string const&) const;
	void isPotionItem() const;
	void getCustomLore() const;
	void wasJustBrewed() const;
	void _hasComponents() const;
	void getEnchantSlot() const;
	void isExperimental() const;
	void _saveComponents(CompoundTag&) const;
	void componentsMatch(ItemInstance const&) const;
	void getCategoryName() const;
	void hasSameUserData(ItemInstance const&) const;
	void hasSameUserData(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > const&) const;
	void isMusicDiscItem() const;
	void isValidAuxValue(int) const;
	void isEquivalentArmor(ItemStack const&) const;
	void getNetworkUserData() const;
	void matchesChargedItem(ItemInstance const&) const;
	void matchesChargedItem(ItemStack const&) const;
	void hasCompoundTextUserData() const;
	void _getHoverFormattingPrefix() const;
public:
	static ItemStack * EMPTY_ITEM;
	static ItemStack * TAG_DISPLAY;
	static ItemStack * TAG_ENCHANTS;
	static ItemStack * MAX_STACK_SIZE;
	static ItemStack * TAG_CAN_DESTROY;
	static ItemStack * TAG_REPAIR_COST;
	static ItemStack * TAG_CAN_PLACE_ON;
	static ItemStack * TAG_CHARGED_ITEM;
	static ItemStack * TAG_DISPLAY_NAME;
	static ItemStack * TAG_STORE_CAN_DESTROY;
	static ItemStack * TAG_STORE_CAN_PLACE_ON;
	static ItemStack * TAG_LORE;
};
