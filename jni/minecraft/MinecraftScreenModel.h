/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

#include "Realms.h"
#include "Social.h"
#include "Core.h"
#include "Clubs.h"

class SkinHandle;
class LoadingState;
class TabbedUpsellScreenDefaultTab;
class PickCustomSkinResult;
class MinecraftGameFeatures;
class ButtonIndiciesEnum;
class TriggerIndiciesEnum;
class ActiveDirectoryModalArgs;
class ProgressHandler;
class KeyboardType;
class TrialUpgradePurchaseTier;
class TransactionContext;
class DownloadStateObject;
class PackSettings;
class PackManifest;
class ActiveDirectoryAction;
class ContainerItemStack;
class Purchase;
class SettingsTabIndex;
class PlayerPermissionLevel;
class glTFExportData;
class EduPurchaseDetails;
class HowToPlayTopicIndex;
class InventoryOptions;
class ContentManager;
class TransactionStatus;
class ToastMessageType;
class DefaultSkin;

class MinecraftScreenModel
{
public:
	//char filler_MinecraftScreenModel[UNKNOW_SIZE];
public:
	virtual ~MinecraftScreenModel();
public:
	MinecraftScreenModel(IMinecraftGame&, IClientInstance&, SceneStack&, SceneFactory&);
	void leaveScreen();
	void getLevelData(std::string const&);
	void addTTSMessage(std::string const&, bool, bool, bool);
	void cancelJoinGame(LoadingState);
	void getUserManager();
	void getFileArchiver();
	void makeBackupOfLevel(LevelSummary const&);
	void getLoadingProgress();
	void getPackSourceFactory();
	void getResourcePackProgress();
	void navigateToDisconnectScreen(std::string const&, std::string const&);
	void scheduleCheckUserStorageAsync();
	void getResourcePackDownloadingProgress(std::string&);
	void copyWorld(std::string const&);
	void getKeyProvider() const;
	void isLeaveGameDone() const;
	void isUPnPCompleted() const;
	void getLevelBasePath() const;
	void getLevelListCache() const;
	void getWorldLoadingState() const;
	void getIsWaitingForSession() const;
	void getResourcePackManager() const;
	void getResourcePackRepository() const;
	void isResourceLoadingFinished() const;
	void hasConnectionToRemoteServer() const;
	void getServerResourcePackManager() const;
	void getResourcePackDownloadingState() const;
	void getHoloInput();
	void joinRealmsGame(Realms::World const&, Social::GameConnectionInfo const&);
	//void joinRealmsWorld(Realms::World, std::function<void (std::string const&, int, bool)>, std::function<void (Realms::GenericStatus, RealmsAPI::JoinStatus, RealmsAPI::FailureReason)>, std::function<void (int)>, IMinecraftEventing::RealmConnectionFlow);
	//void fireEventStartWorld(IMinecraftEventing::NetworkType, std::string const&);
	void navigateToSkinPickerScreen();
	void navigateToTabbedUpsellScreen(TabbedUpsellScreenDefaultTab);
	void navigateToAdhocInProgressScreen(bool);
	void navigateToConvertPurchasesToXBLScreen(std::function<void (bool)>);
	void navigateToPlatformNetworkConnectConfirmationScreen(std::function<void (bool)>);
	void canSignInToXBL() const;
	void getCurrentXUID() const;
	void isAdhocEnabled() const;
	void pickCustomSkin(std::function<void (PickCustomSkinResult)>) const;
	void isFeatureEnabled(MinecraftGameFeatures) const;
	void isNetworkEnabled(bool) const;
	void isMultiplayerAllowed() const;
	void isValidCrossPlatformSkin() const;
	void isUserConnectedToPlatform() const;
	void hasLocalDeviceEntitlements() const;
	void isCreateAndJoinClubAllowed() const;
	void isPlatformThirdPartyConsole() const;
	void getMultiplayerDisabledTextBody(MultiplayerLockedContext) const;
	void getMultiplayerDisabledTextTitle(MultiplayerLockedContext) const;
	void getDevCreateRealmWithoutPurchase() const;
	void isUserWaitingForPlatformConnection() const;
	void needPlatformConnectionBeforeXBLSignIn() const;
	void silentSignin(std::function<void (Social::MultiIdentitySigninResult const&)>);
	void clearTTSQueue();
	void getNameRegistry();
	void isPlayerHosting(ActorUniqueID const&);
	void setSuspendInput(bool);
	void getButtonTexture(ButtonIndiciesEnum);
	void getButtonTexture(TriggerIndiciesEnum);
	void showPlayerProfile(std::string const&, mce::UUID);
	void clearUserCredentials();
	void navigateToStartScreen();
	//void fireEventScreenChanged(std::string const&, std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&);
	void onGameEventNotification(ui::GameEventNotification);
	void connectToPlatformNetwork(std::function<void (Social::UserPlatformConnectionResult)>, bool);
	void getActiveDirectoryIdentity();
	void navigateToActiveDirectoryLogin();
	void navigateToActiveDirectoryModal(ActiveDirectoryModalArgs const&);
	void navigateToXblFriendFinderScreen();
	void navigateToXblOptionalSignInScreen(std::string const&, std::string const&, std::string const&, std::string const&, std::function<void ()>);
	void tryNavigateToXblFirstLaunchScreen();
	void deviceNeedsToBeRemovedForXblSignin();
	void generateFilePickerSettingsForExport(std::string const&, std::string const&, bool);
	void generateFilePickerSettingsForExport();
	void resetActiveDirectoryAuthenticationState();
	//void generateFilePickerSettingsForScreenShots(std::vector<Core::PathBuffer<std::string>, std::allocator<Core::PathBuffer<std::string> > > const&, std::string const&);
	void quit(std::string const&, std::string const&);
	void signIn(std::function<void ()>, std::function<void (Social::MultiIdentitySigninResult const&)>);
	void launchUri(std::string const&);
	void getOptions() const;
	void isUITTSEnabled() const;
	void isHotbarOnlyTouch() const;
	void getSplitScreenInfo() const;
	void isAddFriendAllowed() const;
	void areOtherPlayersInGame() const;
	void getLocalPlayerEntityID() const;
	void isGamepadCursorEnabled() const;
	void getPrivilegesBlockedString(Social::UserPermissionCheckResult const&, std::string const&, std::string const&, std::string const&) const;
	void useMinecraftVersionOfXBLUI() const;
	void openingExternalResourceSuspendsApp() const;
	void pickFile(std::shared_ptr<FilePickerSettings>) const;
	void isEduMode() const;
	void sendPlayerSkin(std::string const&);
	void getSelectedSkinHandle() const;
	//void getDlcBatchModel(std::vector<std::string, std::allocator<std::string> > const&);
	void getDateManager() const;
	void saveLevelData(std::string const&, LevelData const&);
	void startLocalServer(std::string const&, std::string, LevelSettings const&);
	void getContentManager();
	void getPlayerSessionId();
	void setNumberOfOwnedRealms(int);
	void fireEventToastNotification(std::string const&);
	void getMultiplayerServiceManager();
	void sendPurchaseReceiptsToServer();
	void navigateToModalProgressScreen(std::string const&, std::unique_ptr<ProgressHandler, std::default_delete<ProgressHandler> >, bool, std::string const&, bool);
	void getEduOffer() const;
	void isPlatformNX() const;
	void getUserManager() const;
	void isPrimaryClient() const;
	void getOfferRepository() const;
	void getPatchNotesManager() const;
	void getEntitlementManager() const;
	void getNumberOfOwnedRealms() const;
	void hasExternalCoinPurchases() const;
	void getMultiplayerServiceManager() const;
	void goToExternalPlatformStorePage() const;
	void isTrial() const;
	void getProfile(std::string const&, std::function<void (Social::XboxLiveUserProfileData const&)>);
	void getStoreId();
	void getTipText(std::string&);
	void rebindKeys();
	void reportUser(std::string const&, Social::ReportReason, std::string const&, std::function<void (bool, std::string const&)>);
	void resetInput();
	void selectSlot(int, ContainerID);
	void setIsDirty(bool);
	void unMuteUser(std::string const&, std::function<void (bool, std::string const&)>);
	void addFavorite(std::string const&, std::function<void (bool, std::string const&)>);
	void deleteLevel(std::string const&);
	void deleteRealm(Realms::RealmId, std::function<void (Realms::GenericStatus)>);
	void destroyGame();
	void getClubFeed(Clubs::ClubModel const&, std::function<void (Clubs::ActivityFeed)>);
	void getCommands();
	//void getProfiles(std::vector<std::string, std::allocator<std::string> > const&, std::function<void (std::vector<Social::XboxLiveUserProfileData const*, std::allocator<Social::XboxLiveUserProfileData const*> > const&)>);
	void launchStore();
	void readEndPoem();
	void renameLevel(std::string const&, std::string const&);
	void setLanguage();
	void showShareUI();
	void unBlockUser(std::string const&, std::function<void (bool, std::string const&)>);
	void canLaunchUri(std::string const&);
	void cancelSignIn();
	void getLevelData();
	void getNextToast();
	void getUIDefRepo();
	void getWorldPath();
	void launchEduUri(std::string const&);
	void likeFeedItem(Clubs::FeedItem const&, Realms::RealmId, std::string, std::function<void ()>);
	void purchaseGame(std::function<void ()>, TrialUpgradePurchaseTier);
	void removeFriend(std::string const&, std::function<void (bool, std::string const&)>);
	void setShareData(std::string, std::string, std::string);
	void setSimPaused(bool);
	//void invitePlayers(std::vector<std::string, std::allocator<std::string> > const&);
	void isPlayerValid();
	void isSplitScreen();
	void respawnPlayer();
	void supportsShare();
	void deleteFeedItem(Clubs::FeedItem const&, Realms::RealmId, std::string, std::function<void ()>);
	void getClubProfile(std::string const&, std::function<void (Clubs::ClubModel)>);
	void getCommentFeed(Clubs::FeedItem const&, std::function<void (Clubs::ActivityFeed)>);
	void getRealmsWorld(Realms::RealmId, std::function<void (Realms::GenericStatus, Realms::World)>);
	void isOnSceneStack(std::string const&);
	void loginToService(Social::MultiplayerServiceIdentifier, bool);
	void postToClubFeed(Clubs::ClubModel const&, Clubs::NewFeedItem const&, Realms::RealmId, std::function<void (Clubs::FeedItem, bool)>);
	void removeFavorite(std::string const&, std::function<void (bool, std::string const&)>);
	void reportFeedItem(Clubs::ClubModel const&, Clubs::FeedItem const&, std::string const&, Realms::RealmId, std::function<void ()>);
	void saveEduReceipt(std::string const&, std::function<void (bool)> const&);
	void setClubProfile(Clubs::ClubModel const&, std::function<void ()>);
	void setTrialABTest(PropertyBag*);
	//void clubNameVetting(std::string const&, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason)>);
	void disableKeyboard();
	void emoticonifyText(std::string const&);
	void getCurrentRealm();
	void getCurrentToast();
	void getSelectedSlot();
	void isEduOfferOwned();
	void logoffSubclient();
	void openRealmsWorld(Realms::RealmId, std::function<void (Realms::GenericStatus)>, std::function<void (int)>);
	//void saveScreenshots(Core::Path const&, std::vector<Core::PathBuffer<std::string>, std::allocator<Core::PathBuffer<std::string> > > const&, std::shared_ptr<FilePickerSettings>);
	//void acceptRealmsLink(std::string, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason, Realms::World)>);
	void closeRealmsWorld(Realms::RealmId, std::function<void (Realms::GenericStatus)>, std::function<void (int)>);
	void doNotSignIntoXbl();
	//void fetchScreenshots(std::vector<Core::PathBuffer<std::string>, std::allocator<Core::PathBuffer<std::string> > >&);
	//void getDlcBatchModel(std::vector<PackIdVersion, std::allocator<PackIdVersion> > const&);
	//void getDlcBatchModel(std::vector<DlcId, std::allocator<DlcId> > const&);
	void getEduOfferPrice();
	//void getRealmsMembers(Realms::RealmId, std::function<void (Realms::GenericStatus, std::vector<Realms::Player, std::allocator<Realms::Player> >)>);
	void getWorldfromLink(std::string, std::function<void (Realms::GenericStatus, Realms::World)>);
	void isValidRealmName(std::string);
	void leaveRealmsWorld(Realms::RealmId, std::function<void (Realms::GenericStatus)>);
	void popScreensBackTo(ui::SceneType);
	void requestLeaveGame(bool, bool);
	void resetRealmsWorld(Realms::RealmId, std::function<void (Realms::GenericStatus)>, std::function<void (int)>);
	void setHdrBrightness(float);
	void setVRControlMode(bool);
	void startLocalServer(LevelSummary const&, LevelSettings const&);
	void addExternalServer(std::string const&, std::string const&, int);
	//void fetchRealmsWorlds(std::function<void (Realms::GenericStatus, std::vector<Realms::World, std::allocator<Realms::World> >)>);
	void getWireframeQueue();
	void isGameTipsEnabled();
	//void listRealmsInvites(std::function<void (Realms::GenericStatus, std::vector<Realms::Invite, std::allocator<Realms::Invite> >)>);
	void setPlayerGameType(GameType const&);
	void updateTextBoxText(std::string const&);
	//void acceptRealmsInvite(Realms::InviteId, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason)>);
	void completeServerForm(unsigned int, Json::Value const&);
	void editExternalServer(int, std::string const&, std::string const&, int, bool);
	void getEmoticonManager();
	void getLevelPlayerList();
	void getLevelScoreboard();
	void getLocalPlayerUUID();
	void getPlayerAbilities();
	void getPresenceManager();
	//void getRealmsBlocklist(Realms::RealmId, std::function<void (Realms::GenericStatus, std::vector<std::string, std::allocator<std::string> >)>);
	void purchaseEduLicense(std::unique_ptr<TransactionContext, std::default_delete<TransactionContext> >);
	void rejectRealmsInvite(Realms::InviteId, std::function<void (Realms::GenericStatus)>);
	void reportFeedItemXbox(Clubs::ClubModel const&, std::string const&, Clubs::FeedItem const&, std::string const&, Realms::RealmId, std::function<void ()>);
	//void setRealmsWorldInfo(Realms::RealmId, std::string const&, std::string const&, int, int, bool, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason)>);
	void setScreenFadeAlpha(float, float);
	void setValidScreenshot(std::string const&);
	//void triggerRealmShared(std::string const&, IMinecraftEventing::ShareMode const&, Realms::RealmId const&);
	void updateRealmsConfig(Realms::RealmId, std::string const&, std::function<void (Realms::GenericStatus, std::string)>);
	void addDownloadCallback(std::weak_ptr<bool>, std::function<void (DownloadStateObject&)>);
	void dropItemsFromPlayer(ItemStack const&, int);
	void fireEventOfferRated(std::string const&, int, int, int, double);
	void getNewPopupItemText(std::string&, bool&, bool&);
	void getReportedFeedItem(Clubs::ReportedItem const&, std::function<void (Clubs::ReportedItem const&, Clubs::FeedItem, bool)>);
	void getServerSettingsId();
	void getTextToIconMapper();
	void joinRealmFromInvite(Realms::World);
	void recenterVRAlignment();
	void requestImageFromUrl(std::string const&, std::function<void (Core::Path const&)>);
	void setInputBindingMode(InputBindingMode);
	void setLastSelectedSlot(int, ContainerID);
	void _setLoadingRealmLink(bool);
	void acknowledgedAutoSave();
	void addToRealmsBlocklist(Realms::RealmId, std::string const&, std::function<void (Realms::GenericStatus)>);
	void fetchScreenshotsPath();
	//void getRealmWorldBackups(Realms::RealmId, std::function<void (Realms::GenericStatus, std::vector<Realms::Backup, std::allocator<Realms::Backup> >)>);
	void getRealmsInviteCount(std::function<void (Realms::GenericStatus, int)>);
	//void getReportedItemPaths(std::string const&, std::function<void (std::vector<Clubs::ReportedItem, std::allocator<Clubs::ReportedItem> >, bool)>);
	void navigateToDevConsole();
	void navigateToFeedScreen(Realms::World const&);
	void removeExternalServer(int);
	//void triggerContentShared(std::string const&, std::string const&, IMinecraftEventing::ShareMode const&);
	void _processWorldTemplate(std::string const&, std::string const&, std::function<void (bool)>);
	void fireEventGameTipShown(int, bool, std::string const&);
	void firePackSettingsEvent(PackSettings const&, PackManifest const&);
	void getExternalServerInfo(int);
	void getInfiniteInviteLink(Realms::RealmId, std::function<void (Realms::GenericStatus, Realms::InviteLink)>);
	void getServerSettingsData();
	//void initializeRealmsWorld(Realms::RealmId, std::string const&, std::string const&, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason)>);
	void launchFeedbackHelpUri();
	void navigateToBrazeScreen(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&);
	void postCommentToFeedItem(Clubs::FeedItem const&, std::string const&, Realms::RealmId, std::string, std::function<void (Clubs::FeedItem)>);
	void quitStoreRatingScreen();
	void requestServerSettings();
	void sendDevConsoleMessage(std::string const&);
	//void updateRealmsWhitelist(Realms::RealmId, std::map<std::string, RealmsAPI::InviteAction, std::less<std::string>, std::allocator<std::pair<std::string const, RealmsAPI::InviteAction> > >, std::function<void (Realms::GenericStatus, Realms::World)>);
	void addCodeBuilderObserver(CodeBuilderObserver&);
	void fireEventPopupFiredEdu(std::string const&, std::string const&, std::string const&, std::string const&, ActiveDirectoryAction);
	void getEDUDiscoveryService();
	void getPackSettingsFactory();
	void getPlayerAbilitiesById(ActorUniqueID&);
	void getRealmsConfigDetails(Realms::RealmId, std::function<void (Realms::GenericStatus, Realms::ConfigInfo)>);
	//void getRealmsOnlinePlayers(std::function<void (Realms::GenericStatus, std::vector<Realms::World, std::allocator<Realms::World> >)>);
	void getSubscriptionDetails(Realms::RealmId, std::function<void (Realms::GenericStatus, Realms::SubscriptionInfo)>);
	void ignoreReportedFeedItem(Clubs::ReportedItem const&, std::string const&, Clubs::ClubModel const&, std::function<void ()>);
	void isVRComfortControlMode();
	void joinEDUDiscoveredWorld();
	void navigateToInviteScreen();
	void requestClientLeaveGame(bool, bool);
	void sendSetAbilitiesPacket(Abilities const&, ActorUniqueID, bool);
	//void setRealmsCompatibility(RealmsAPI::Compatibility);
	void stopCodeBuilderSession();
	void acknowledgedPatchNotice();
	void clearPerfTurtleMessages();
	void createJpegCommentWriter();
	void fireEventDevConsoleOpen();
	void fireEventItemAutoPlaced(ContainerItemStack const&);
	void fireEventOptionsUpdated();
	void fireEventWorldGenerated(std::string const&, LevelSettings const&, bool);
	void fulfillPriorEduPurchase(std::weak_ptr<Purchase>, std::unique_ptr<TransactionContext, std::default_delete<TransactionContext> >);
	void getRealmsContentService();
	void navigateToCommentScreen(Clubs::FeedItem&, Social::XboxLiveUserProfileData&, Clubs::ClubModel&, bool&, Realms::World const&);
	void navigateToFeedbackPopup();
	void navigateToOptionsScreen(SettingsTabIndex, bool, bool);
	void navigateToPersonaScreen();
	void restoreRealmWorldBackup(Realms::RealmId, std::string, std::function<void (int)>, std::function<void (Realms::GenericStatus)>);
	void sendSetDifficultyPacket(Difficulty);
	void sendTrialWelcomeMessage();
	//void setTexturePacksRequired(Realms::RealmId, bool const&, std::function<void (Realms::GenericStatus, RealmsAPI::FailureReason)>);
	void setUserPermissionRealms(Realms::RealmId, std::string const&, PlayerPermissionLevel const&, std::function<void (Realms::GenericStatus)>);
	void uploadScreenshotToClubs(Core::Path const&, std::function<void (Core::Path)>);
	void createInfiniteInviteLink(Realms::RealmId, std::function<void (Realms::GenericStatus, Realms::InviteLink)>);
	void devConsoleExecuteCommand(std::string const&);
	void fireEventInventoryClosed();
	void fireEventInventoryOpened(bool);
	//void fireStructureBlockAction(IMinecraftEventing::StructureBlockActionType, StructureEditorData const&, StructureTelemetryClientData const&);
	//void fireglTFExportStateEvent(glTFExportData const&, IMinecraftEventing::ExportOutcome, IMinecraftEventing::ExportStage);
	void getLastDevConsoleMessage();
	void getResourcePacksInfoData();
	void getUserProfileDataByXuid(std::string const&);
	void handleHideGUIButtonPress();
	void navigateToGamePlayScreen();
	void navigateToVRSchemeScreen(bool);
	void setNumberOfFriendsRealms(int);
	void setRefreshPendingInvites(bool);
	void takeScreenshotForPosting();
	void triggerRealmUrlGenerated(std::string const&, Realms::RealmId const&);
	void checkRealmsPaymentService(std::function<void (bool)>);
	void findAndEditExternalServer(std::string const&, std::string const&, int, bool);
	void getGamepadRemappingLayout(VRControllerType);
	void getPrimaryLocalPlayerUUID();
	void getUnfulfilledEduPurchase(EduPurchaseDetails&);
	void navigateToHowToPlayScreen(HowToPlayTopicIndex);
	void removeFromRealmsBlocklist(Realms::RealmId, std::string const&, std::function<void (Realms::GenericStatus)>);
	void retryActiveDirectoryCheck();
	void shouldPushVRControlScreen();
	void startExternalNetworkWorld(std::string const&, std::string const&, int);
	void triggerNpcUpdateTelemetry(Actor&);
	void getNewJukeboxPopupItemText(std::string&, bool&, bool&);
	void getUserMemberOfWorldsCount(std::function<void (Realms::GenericStatus, bool)>);
	void isCraftingTableTipsEnabled();
	void navigateToManageFeedScreen(Realms::World const&);
	void navigateToScreenshotScreen();
	void savePlayerInventoryOptions(InventoryOptions const&);
	void savePlayerInventoryOptions(std::string const&, int, int, bool, int, int);
	void setCursorSelectedItemGroup(ItemGroup const&);
	void updateRealmsTrialAvailable(std::function<void (Realms::GenericStatus)>);
	void clearDictationDataAvailable();
	void confirmResourcePackDownload(ResourcePackResponse, bool);
	void createAndUploadWorldToRealm(LevelSummary const&, LevelSettings const&, Realms::World, std::function<void ()>);
	void createAndUploadWorldToRealm(std::string const&, std::string, LevelSettings const&, Realms::World, std::function<void ()>);
	void getDevConsoleScreenMessages();
	void getLessonProgressionService();
	void navigateToAchievementScreen();
	void navigateToPermissionsScreen(ActorUniqueID);
	void navigateToStoreRatingScreen();
	void setDefaultPermissionsRealms(Realms::RealmId, PlayerPermissionLevel const&, std::function<void (Realms::GenericStatus)>);
	void fireEventPurchaseGameAttempt(std::string const&, std::string const&, std::string const&);
	void getVRShowComfortSelectScreen();
	void isLevelLoadingProgressScreen();
	void refreshCurrentRealmWorldInfo();
	void scheduleCheckUserStorageSync();
	void sendSetDefaultGameTypePacket(GameType);
	void convertLocalEntitlementsToXBL(std::function<void (bool)>);
	void flushQueuedDevConsoleMessages();
	void handleHideToolTipsButtonPress();
	void isHostingLocalDedicatedServer();
	void isServiceMultiplayerSupported(Social::MultiplayerServiceIdentifier);
	void navigateToVRInformationScreen();
	void navigateToXblReportUserScreen(std::string const&, std::string const&);
	void triggerRealmMemberlistCleared(Realms::RealmId const&, int);
	void triggerWorldExportedTelemetry(long long, unsigned long long);
	//void fireEventFileTransmissionState(IMinecraftEventing::FileTransmissionDirection, IMinecraftEventing::FileTransmissionState, IMinecraftEventing::FileTransmissionType, std::string const&, unsigned long long, double);
	void fireEventHowToPlayTopicChanged(std::string const&, InputMode);
	void getResourcePackDownloadManager(std::string const&);
	void handleHidePaperDollButtonPress();
	//void navigateToDeleteProgressScreen(std::string const&, ContentManager&, std::vector<ContentItem*, std::allocator<ContentItem*> >);
	void navigateToRealmsSettingsScreen(Realms::World const&, SettingsTabIndex);
	void setActiveDirectoryEulaAccepted();
	void setRealmsShowFriendInvitesOnly(bool);
	void uploadAndPostScreenshotToClubs(Core::Path const&, std::string, Clubs::ClubModel, Realms::RealmId);
	void waitingResourcePackConfimation();
	void getHandlingControllerDisconnect();
	void getPrimaryLocalPlayerUUIDString();
	void navigateToTrialConversionScreen();
	//void sendRealmsWhitelistNotification(std::vector<std::string, std::allocator<std::string> >);
	void sendTemplateOptionsUnlockPacket();
	void navigateToDayOneExperienceScreen();
	void navigateToScreenshotPickerScreen(Core::Path const&, Realms::World const&);
	void navigateToSimpleInProgressScreen(std::string const&);
	void navigateToXblConsoleSignInScreen(std::string const&, std::string const&);
	void triggerBoardTextUpdatedTelemetry(ChalkboardBlockActor&);
	void setGameScoreUpdateUIBindsCallback(std::function<void ()>);
	void setOpenControllerDisconnectScreen(bool);
	void triggerPortfolioExportedTelemetry(int, int);
	void fireEduiOSPurchaseTransactionEvent(TransactionStatus const&);
	void navigateToXblGamerProfileCardScreen(Social::XboxLiveUserProfileData const&);
	void navigateToXblGamerProfileCardScreen(std::string const&, mce::UUID);
	void getScreenContext_DEPRECATED_DO_NOT_USE(float);
	void navigateToXblConsoleSignInSucceededScreen(Social::SignInResult const&, std::function<void (Social::SignInResult)>, bool);
	void setActiveDirectoryAuthenticationOfferPurchase();
	void setActiveDirectoryAuthenticationStateComplete();
	void navigateToPlatformStoreConnectConfirmationScreen(std::function<void (bool)>);
	void signOut();
	void muteUser(std::string const&, std::function<void (bool, std::string const&)>);
	void addFriend(std::string const&, std::function<void (bool, std::string const&)>);
	void blockUser(std::string const&, std::function<void (bool, std::string const&)>);
	void getPlayer();
	void pushToast(ToastMessageType, std::string const&, std::string const&, Json::Value const&);
	void _isPremium(PackManifest const&) const;
	void getEdition() const;
	void isCreative() const;
	void isOperator() const;
	void isSneaking() const;
	void canPickSkin() const;
	void isUserReady() const;
	void getHitResult() const;
	void getIpAddress() const;
	void getLevelData(std::string const&) const;
	void getLevelData() const;
	void getSimPaused() const;
	void isLeftHanded() const;
	void isNotVLRMode() const;
	void isRealmLevel() const;
	void isRealmOwner() const;
	void setClipboard(std::string const&) const;
	void supportsMSAA() const;
	void getPlayerName() const;
	void getScreenName() const;
	void isHolographic() const;
	void supportsTouch() const;
	void getClientModel() const;
	void getDisplayName() const;
	void hasInputDevice() const;
	void hasLocalPlayer() const;
	void isOnlineClient() const;
	void isStartingGame() const;
	void getARVRPlatform() const;
	void getXboxLiveUser() const;
	void getXuidsInLobby() const;
	void handControlsHud() const;
	void isRealmsEnabled() const;
	void isSignedInToAny() const;
	void isSignedInToNEX() const;
	void isSignedInToPSN() const;
	void isSignedInToXBL() const;
	void isUILoadingDone() const;
	void isUserAnonymous() const;
	void supportsGamepad() const;
	void supportsScripts() const;
	void _isPremiumLocked(PackManifest const&) const;
	void allowSplitScreen() const;
	void getArchiverState() const;
	void getBuildPlatform() const;
	void getDictationText() const;
	void getHdrBrightness() const;
	void getVersionString() const;
	void isInputModeMouse() const;
	void isInputModeTouch() const;
	void isKeyboardActive() const;
	void isLivingRoomMode() const;
	void isNetworkAllowed() const;
	void showSignInButton() const;
	void signinInProgress() const;
	void supports3DExport() const;
	void getPlayerGameType() const;
	void hasEntitlementFor(ContentIdentity const&) const;
	void hasSecondaryInput() const;
	void isGameModeEnabled(GameType) const;
	void isKeyboardEnabled() const;
	void isPlatformBerwick() const;
	void isPlatformConsole() const;
	void isRealmsFeatureOn(std::string const&) const;
	void isSignedInToAdhoc() const;
	void platformTTSExists() const;
	void supportsClipboard() const;
	void supportsVibration() const;
	void wasSessionCreated(Social::MultiplayerServiceIdentifier) const;
	void getAchievementData() const;
	void getContentTierInfo() const;
	void getCurrentGamertag() const;
	void getCustomSkinIndex() const;
	void getHotbarSlotCount() const;
	void getLevelPlayerList() const;
	void getLevelScoreboard() const;
	void getLiquidHitResult() const;
	void getScreenTelemetry() const;
	void getXboxLiveFriends() const;
	void isInputModeGamepad() const;
	void isNetworkAvailable() const;
	void isPlayerOnXboxLive(std::string const&) const;
	void isSessionInfoValid(Social::MultiplayerServiceIdentifier) const;
	void isXBLInviteEnabled() const;
	void getCustomSkinHandle(DefaultSkin) const;
	void getVRControllerType() const;
	void isInMultiplayerGame() const;
	void isMultiPlayerClient() const;
	void isRealityFullVRMode() const;
	void isRealmsInitialized() const;
	void readLoadingMessages() const;
	void realmsCompatibility() const;
	void fireEventPopupClosed(std::string const&) const;
	void fireIDESelectedEvent(std::string const&) const;
	void getGameDevInfoString() const;
	void getPackSourceFactory() const;
	void getXboxLiveBlockList() const;
	void isFullscreenKeyboard() const;
	void isSkinPlatformLocked(SkinHandle const&) const;
	void findProfanityInString(ProfanityFilterContext, std::string const&) const;
	void fireEventEduResources() const;
	void getBuildDateISOString() const;
	void getContentAcquisition() const;
	void getContentLogMessages() const;
	void getContentTierManager() const;
	void getInventorySlotCount() const;
	void getMinecraftAccountID() const;
	void getPerfTurtleMessages() const;
	void isControllerConnected() const;
	void isDesktopScalingRules() const;
	void isDisconnectedFromNEX() const;
	void isDisconnectedFromPSN() const;
	void isPremiumOwnedMissing(PackIdVersion const&, ContentIdentity const&) const;
	void isUnableToShowXBLLogo() const;
	void supportsKeyboardMouse() const;
	void getClubsScreenshotPath() const;
	void getGameDevGitShaString() const;
	void getSplitscreenJoinText() const;
	void hasActiveDeviceAccount() const;
	void hasBroadcastPermission() const;
	void supportsDeviceAccounts() const;
	void getMaxSimRadiusInChunks() const;
	void isAchievementDataCached() const;
	void isCodeSessionInProgress() const;
	void requiresXBLSigninToPlay() const;
	void supports3rdPartyServers() const;
	void getLastContentLogMessage() const;
	void getNumberOfFriendsRealms() const;
	void getPlayerPermissionLevel() const;
	void setMaxDevConsoleMessages(int) const;
	void filterProfanityFromString(ProfanityFilterContext, std::string const&, bool) const;
	void getBlankLineDismissesChat() const;
	void getDefaultSkinIndexByType(DefaultSkin) const;
	void getEducationLevelSettings() const;
	void getNetworkProtocolVersion() const;
	void getPlayerInventoryOptions() const;
	void getUnmappedPlayerGameType() const;
	void isAchievementDataUpdating() const;
	void isPrimaryLevelMultiplayer() const;
	void newDictationDataAvailable() const;
	void realmsCompatibilityStatus() const;
	void getCurrentMaxGUIScaleIndex() const;
	void getCursorSelectedItemGroup() const;
	void getGlobalResourcePacksPath() const;
	void getKeyboardRemappingLayout() const;
	void addSelectedSkinToRecentList() const;
	void getDevelopmentVersionString() const;
	void isEnabledTouchOrHolographic() const;
	void isInputModeMotionController() const;
	void isServiceMultiplayerEnabled(Social::MultiplayerServiceIdentifier) const;
	void needToRefreshPendingInvites() const;
	//void fireEventChatSettingsUpdated(std::vector<Social::Events::Property, std::allocator<Social::Events::Property> > const&) const;
	void getCurrentContentLogFileName() const;
	void getPendingSelectedSkinHandle() const;
	void getTotalHardwareThreadsCount() const;
	void getStoreNetworkFailureTimeout() const;
	void getThirdPartyServerRepository() const;
	void areAnyDownloadsOrImportsActive() const;
	void getRealmsShowFriendInvitesOnly() const;
	void hasCustomTrialConversionScreen() const;
	//void isAnyDlcDownloadingOrImporting(std::vector<std::string, std::allocator<std::string> > const&) const;
	void isConfigurableRealmEnvironment() const;
	void getPlayerCommandPermissionLevel() const;
	void getSplitscreenJoinPromptVisible() const;
	void isPremiumPlatformAccessRequired() const;
	void getKeyboardRemappingLayoutByType(KeyboardType) const;
	void shouldShowThirdPartyDisconnected() const;
	void doesUserHavePremiumPlatformAccess() const;
	void fireCodeCommandButtonPressedEvent() const;
	void isXboxLiveSupportedOnThisPlatform() const;
	void isRealmsCompatibilityCheckComplete() const;
	void needPlatformConnectionForMultiplayer() const;
	void isPrimaryLevelCrossPlatformMultiplayer() const;
	void getWorldConverterDevVersionNumberString() const;
	void getWorldConverterDevelopmentVersionString() const;
	void copyInternalSettingsFolderToExternalLocation() const;
	void isDirty() const;
	void isOrbis() const;
	void isWin10() const;
	void isFireTV() const;
	void isGearVR() const;
	void isInGame() const;
	void isOculus() const;
	void isRiding() const;
	void isVRMode() const;
	void isDesktop() const;
	void isPreGame() const;
};
