/***
 *	MCPE 1.13.0.1
 ***/
#pragma once

class CommandOriginSystem;
class ChangeDimensionRequest;
class StorageVersion;
class ActorEventCoordinator;
class ServerLevelEventCoordinator;
class EntityNetId;
class NavigationComponent;
class ServerPlayerEventCoordinator;
class PlayerEventCoordinator;
class ClientLevelEventCoordinator;
class BlockEventCoordinator;
class ItemEventCoordinator;
class BossEventUpdateType;
class _TickPtr;
class BossEventUpdateType;
class EducationLevelSettings;
class BossEventUpdateType;
class BossEventListener;
class BossEventPacket;
class CurrentCmdVersion;
class SoundPlayer;

class Level
{
public:
	//char filler_Level[UNKNOW_SIZE];
public:
	virtual ~Level();
	virtual void onSourceCreated(BlockSource&);
	virtual void onSourceDestroyed(BlockSource&);
	virtual void initialize(std::string const&, LevelSettings const&, LevelData*, std::string const*);
	virtual void startLeaveGame();
	virtual void addEntity(BlockSource&, std::unique_ptr<Actor, std::default_delete<Actor> >);
	virtual void addGlobalEntity(BlockSource&, std::unique_ptr<Actor, std::default_delete<Actor> >);
	virtual void addAutonomousEntity(BlockSource&, std::unique_ptr<Actor, std::default_delete<Actor> >);
	virtual void addPlayer(std::unique_ptr<Player, std::default_delete<Player> >);
	virtual void takeEntity(ActorUniqueID);
	virtual void borrowEntity(ActorUniqueID, LevelChunk*);
	virtual void getBiomeRegistry() const;
	virtual void getBiomeRegistry();
	virtual void getBlockPalette() const;
	virtual void getBlockPalette();
	virtual void getFeatureRegistry() const;
	virtual void getFeatureRegistry();
	virtual void getFeatureTypeFactory() const;
	virtual void getFeatureTypeFactory();
	virtual void getJigsawStructureRegistry() const;
	virtual void getJigsawStructureRegistry();
	virtual void getStructureManager();
	virtual void getStructureManager() const;
	virtual void getBiomeComponentFactory() const;
	virtual void getBiomeComponentFactory();
	virtual void getSurfaceBuilderRegistry() const;
	virtual void getSurfaceBuilderRegistry();
	virtual void getDimensionFactory() const;
	virtual void getDimensionFactory();
	virtual void onPlayerDeath(Player&, ActorDamageSource const&);
	virtual void tick();
	virtual void directTickEntities(BlockSource&);
	virtual void updateSleepingPlayerList();
	virtual void setDifficulty(Difficulty);
	virtual void setCommandsEnabled(bool);
	virtual void setWorldTemplateOptionsUnlocked();
	virtual void saveAdditionalData();
	virtual void onNewChunk(BlockSource&, LevelChunk&);
	virtual void onNewChunkFor(Player&, LevelChunk&);
	virtual void onChunkLoaded(LevelChunk&);
	virtual void queueEntityRemoval(std::unique_ptr<Actor, std::default_delete<Actor> >&&, bool);
	virtual void removeEntityReferences(Actor&, bool);
	virtual void loadFunctionManager();
	virtual void getClientResourcePackManager() const;
	virtual void getServerResourcePackManager() const;
	virtual void getTradeTables();
	virtual void addEntryToTagCache(std::string const&);
	virtual void dropEntryFromTagCache(std::string const&);
	virtual void runCommand(HashedString const&, CommandOrigin&, CommandOriginSystem, CurrentCmdVersion);
public:
	//Level(SoundPlayer&, std::unique_ptr<LevelStorage, std::default_delete<LevelStorage> >, IMinecraftEventing&, bool, Scheduler&, StructureManager&, ResourcePackManager&, IEntityRegistryOwner&, std::unique_ptr<BlockComponentFactory, std::default_delete<BlockComponentFactory> >, std::unique_ptr<BlockDefinitionGroup, std::default_delete<BlockDefinitionGroup> >);
	void getItemEventCoordinator();
	void getActorEventCoordinator();
	void getBlockEventCoordinator();
	void getClientPlayerEventCoordinator();
	void getEventing();
	void getAdventureSettings();
	void isClientSide() const;
	void getCurrentTick() const;
	void getLevelData();
	void getLevelStorage();
	void getServerPlayerEventCoordinator();
	void getSeed();
	void getDimensionConversionData() const;
	void addListener(LevelListener&);
	void animateTick(Actor&);
	void getHitResult();
	void saveGameData();
	void suspendAndSave();
	void getLevelId() const;
	void getTearingDown() const;
	void isMultiplayerGame() const;
	void takePicture(cg::ImageBuffer&, Actor*, Actor*, ScreenshotOptions&);
	void setLANBroadcast(bool);
	void setMultiplayerGame(bool);
	void setXBLBroadcastMode(Social::GamePublishSetting);
	void waitAsyncSuspendWork();
	void deferTimedStorageActions(bool);
	void setMultiplayerGameIntent(bool);
	void setPlatformBroadcastMode(Social::GamePublishSetting);
	void getLANBroadcast() const;
	void hasLevelStorage() const;
	void hasXBLBroadcast() const;
	void getActivePlayerCount() const;
	void hasPlatformBroadcast() const;
	void getGlobalBlockPalette() const;
	void getLANBroadcastIntent() const;
	void getPrimaryLocalPlayer() const;
	void getXBLBroadcastIntent() const;
	void hasXBLBroadcastIntent() const;
	void getMultiplayerGameIntent() const;
	void getPlatformBroadcastIntent() const;
	void hasPlatformBroadcastIntent() const;
	void playSound(LevelSoundEvent, Vec3 const&, int, ActorDefinitionIdentifier const&, bool, bool);
	void createRandomSeed();
	void createUniqueLevelID(int);
	void getPlayerList();
	void getScoreboard();
	void isUsableLevel(Level*);
	void getPhotoStorage();
	void getWireframeQueue();
	void getLiquidHitResult();
	void getPlayerAbilities(ActorUniqueID const&);
	void getPlayerList() const;
	void getScreenshotsFolder() const;
	void getEducationLevelSettings() const;
	void getPlayer(ActorUniqueID) const;
	void getGameRules() const;
	void getGameRules();
	void setLevelId(std::string);
	void removeListener(LevelListener&);
	//void createDimension(AutomaticID<Dimension, int>);
	void createPhotoStorage();
	void setDefaultGameType(GameType);
	void setPlayerAbilities(ActorUniqueID const&, Abilities);
	void setMsaGamertagsOnly(bool);
	void setTime(int);
	void fetchEntity(ActorUniqueID, bool) const;
	void getRuntimeEntity(ActorRuntimeID, bool) const;
	void getRuntimePlayer(ActorRuntimeID) const;
	void getDefaultGameType() const;
	void getBlockDefinitions() const;
	void useMsaGamertagsOnly() const;
	void hasExperimentalGameplayEnabled() const;
	void getPlayer(mce::UUID const&) const;
	void addParticle(ParticleType, Vec3 const&, Vec3 const&, int, CompoundTag const*, bool);
	void getRandom() const;
	void checkMaterial(AABB const&, MaterialType, Actor*);
	void requestPlayerChangeDimension(Player&, std::unique_ptr<ChangeDimensionRequest, std::default_delete<ChangeDimensionRequest> >);
	void getLevelData() const;
	void getPacketSender() const;
	void getRemotePlayerEventCoordinator();
	//void getDimension(AutomaticID<Dimension, int>) const;
	void getMapSavedData(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > const&);
	void addParticleEffect(HashedString const&, Vec3 const&, MolangVariableMap const&);
	void forEachPlayer(std::function<bool (Player&)>);
	void getGlobalEntities();
	void getWireframeQueue() const;
	void _destroyEffect(BlockPos const&, Block const&, int);
	void addBreakingItemParticleEffect(Vec3 const&, ParticleType, TextureUVCoordinateSet const&, bool);
	void getTickingArea(mce::UUID const&) const;
	void addParticleEffect(HashedString const&, Actor const&, HashedString const&, Vec3 const&, MolangVariableMap const&);
	void getXBLBroadcastMode() const;
	void isPlayerSuspended(Player&) const;
	void hasCommandsEnabled() const;
	void hasStartWithMapEnabled() const;
	void addBossEventListener(BossEventListener*);
	void removeBossEventListener(BossEventListener*);
	void getNextRuntimeID();
	void levelCleanupQueueEntityRemoval(std::unique_ptr<Actor, std::default_delete<Actor> >&&, bool);
	void _getClientLevelEventCoordinator();
	void getTime() const;
	void requestMapInfo(ActorUniqueID);
	void getMapSavedData(ActorUniqueID);
	void handleLevelEvent(LevelEvent, CompoundTag const&);
	void handleLevelEvent(LevelEvent, Vec3 const&, int);
	void handleSoundEvent(LevelSoundEvent, Vec3 const&, int, ActorDefinitionIdentifier const&, bool, bool);
	void handleSoundEvent(std::string const&, Vec3 const&, float, float);
	void broadcastBossEvent(BossEventUpdateType, ActorUniqueID const&, BossEventPacket const&);
	//void createMapSavedData(ActorUniqueID const&, BlockPos const&, AutomaticID<Dimension, int>, int);
	void handleStopAllSounds();
	void handleStopSoundEvent(std::string const&);
	void setEducationLevelSettings(EducationLevelSettings);
	void areBossEventListenersReady();
	void _clientHandleAddOwnedEntity(EntityNetId);
	void _clientHandleRemoveOwnedEntity(EntityNetId);
	void getUsers();
	void getRecipes() const;
	void isEdu() const;
	void playSynchronizedSound(BlockSource&, LevelSoundEvent, Vec3 const&, int, ActorDefinitionIdentifier const&, bool, bool);
	void broadcastLevelEvent(LevelEvent, Vec3 const&, int, Player*);
	void broadcastEntityEvent(Actor*, ActorEvent, int);
	void forEachPlayer(std::function<bool (Player const&)>) const;
	void getDifficulty() const;
	void getPlayerColor(Player const&) const;
	void resumePlayer(Player&);
	void copyAndLockMap(ActorUniqueID, ActorUniqueID);
	void extinguishFire(BlockSource&, BlockPos const&, unsigned char);
	void getNewUniqueID();
	void getSharedSpawnPos();
	void broadcastSoundEvent(BlockSource&, LevelSoundEvent, Vec3 const&, int, ActorDefinitionIdentifier const&, bool, bool);
	void getDefaultAbilities();
	void sendAllPlayerAbilities(Player const&);
	void broadcastDimensionEvent(BlockSource&, LevelEvent, Vec3 const&, int, Player*);
	void forceFlushRemovedPlayers();
	void getPlayerFromServerId(std::string const&) const;
	void forEachDimension(std::function<bool (Dimension&)>);
	void forceRemoveEntity(Actor&);
	void findPlayer(std::function<bool (Player const&)>) const;
	void setHasLockedBehaviorPack(bool);
	void setHasLockedResourcePack(bool);
	void _getServerLevelEventCoordinator();
	void suspendPlayer(Player&);
	void getLootTables();
	void getTagRegistry();
	void getTickingAreasMgr();
	//void entityChangeDimension(Actor&, AutomaticID<Dimension, int>);
	void checkAndHandleMaterial(AABB const&, MaterialType, Actor*);
	void addTerrainParticleEffect(BlockPos const&, Block const&, Vec3 const&, float, float, float);
	void playSound(BlockSource&, LevelSoundEvent, Vec3 const&, int, ActorDefinitionIdentifier const&, bool, bool);
	void tickedMob();
	void getSpawner() const;
	void getEntityDefinitions() const;
	void getMob(ActorUniqueID) const;
	void getActorAnimationGroup() const;
	void getActorAnimationControllerGroup() const;
	void destroyBlock(BlockSource&, BlockPos const&, bool);
	void registerTemporaryPointer(_TickPtr&);
	void unregisterTemporaryPointer(_TickPtr&);
	//void getSpecialMultiplier(AutomaticID<Dimension, int>);
	void broadcastDimensionEvent(BlockSource&, LevelEvent, Vec3 const&, Block const&, Player*);
	void explode(BlockSource&, Actor*, Vec3 const&, float, bool, bool, float, bool);
	void getProjectileFactory() const;
	void broadcastBossEvent(BossEventUpdateType);
	void playSynchronizedSound(BlockSource&, LevelSoundEvent, Vec3 const&, Block const&, ActorDefinitionIdentifier const&, bool, bool);
	void broadcastSoundEvent(BlockSource&, LevelSoundEvent, Vec3 const&, Block const&, ActorDefinitionIdentifier const&, bool, bool);
	void expandMapByID(ActorUniqueID, bool);
	void getPortalForcer();
	void denyEffect(Vec3 const&);
	void getNetEventCallback() const;
	void onChunkDiscarded(LevelChunk&);
	void getAutonomousLoadedEntities();
	void getSavedData() const;
	void saveBiomeData();
	void setIsExporting(bool);
	void saveDirtyChunks();
	void isExporting() const;
	void savePlayers();
	void _loadMapData(ActorUniqueID const&);
	void potionSplash(Vec3 const&, Color const&, bool);
	void saveVillages();
	void tickEntities();
	void _resumePlayer(mce::UUID const&);
	void getNextPlayer(ActorUniqueID const&, bool);
	void getPrevPlayer(ActorUniqueID const&, bool);
	void saveLevelData();
	void updateWeather(float, int, float, int);
	void _loadBiomeData();
	void _suspendPlayer(mce::UUID const&);
	void getPlayerNames();
	void _resetBiomeData();
	void _saveAllMapData();
	void _saveSomeChunks();
	void getRandomPlayer();
	void isLeaveGameDone();
	void setDefaultSpawn(BlockPos const&);
	void setIsClientSide(bool);
	void setPacketSender(PacketSender*);
	void _checkUserStorage();
	void _removeAllPlayers();
	void tickEntitySystems();
	//void _fixEntitiesRegion(std::vector<Actor*, std::allocator<Actor*> >&, BlockSource const&, Dimension&);
	//void createMapSavedData(std::vector<ActorUniqueID, std::allocator<ActorUniqueID> > const&, BlockPos const&, AutomaticID<Dimension, int>, int);
	void _createMapSavedData(ActorUniqueID const&);
	void _validatePlayerName(Player&);
	void broadcastLevelEvent(LevelEvent, CompoundTag const&, Player*);
	void getNumRemotePlayers();
	void registerBorderBlock(BlockLegacy const&);
	void setNetEventCallback(NetEventCallback*);
	void spawnParticleEffect(std::string const&, Vec3 const&, Dimension*);
	void spawnParticleEffect(std::string const&, Actor const&, Vec3 const&);
	void getAutonomousEntities();
	void setLANBroadcastIntent(bool);
	void setXBLBroadcastIntent(Social::GamePublishSetting);
	void upgradeStorageVersion(StorageVersion);
	void _playerChangeDimension(Player*, ChangeDimensionRequest&);
	void _tickTemporaryPointers();
	void removeAutonomousEntity(Actor*, LevelChunk*);
	void _getValidatedPlayerName(std::string const&);
	void _handlePlayerSuspension();
	void _loadAutonomousEntities();
	void _pollSaveGameStatistics();
	void _saveAutonomousEntities();
	void setFinishedInitializing();
	void setItemEventCoordinator(std::unique_ptr<ItemEventCoordinator, std::default_delete<ItemEventCoordinator> >&&);
	void setActorEventCoordinator(std::unique_ptr<ActorEventCoordinator, std::default_delete<ActorEventCoordinator> >&&);
	void setBlockEventCoordinator(std::unique_ptr<BlockEventCoordinator, std::default_delete<BlockEventCoordinator> >&&);
	void removeAllNonPlayerEntities(ActorUniqueID);
	void saveEducationLevelSettings();
	void setPlatformBroadcastIntent(Social::GamePublishSetting);
	void _cleanupDisconnectedPlayers();
	//void _clientHandleAddWeakRefEntity(EntityNetId, WeakRefT<EntityRefTraits> const&);
	void _handleChangeDimensionRequests();
	void _setClientLevelEventCoordinator(std::unique_ptr<ClientLevelEventCoordinator, std::default_delete<ClientLevelEventCoordinator> >&&);
	void _setServerLevelEventCoordinator(std::unique_ptr<ServerLevelEventCoordinator, std::default_delete<ServerLevelEventCoordinator> >&&);
	void setClientPlayerEventCoordinator(std::unique_ptr<ClientPlayerEventCoordinator, std::default_delete<ClientPlayerEventCoordinator> >&&);
	void setRemotePlayerEventCoordinator(std::unique_ptr<PlayerEventCoordinator, std::default_delete<PlayerEventCoordinator> >&&);
	void setServerPlayerEventCoordinator(std::unique_ptr<ServerPlayerEventCoordinator, std::default_delete<ServerPlayerEventCoordinator> >&&);
	void _clientHandleRemoveWeakRefEntity(EntityNetId);
	void save();
	void findPath(Actor&, Actor&, NavigationComponent&);
	void findPath(Actor&, int, int, int, NavigationComponent&);
	void _syncTime(int);
	void getUserCount() const;
	void getPlayerXUID(mce::UUID const&) const;
	void getSpawnRules() const;
	void getNetherScale() const;
	void getNewPlayerId() const;
	void getDefaultSpawn() const;
	void getLevelStorage() const;
	void getPlayerByXuid(std::string const&) const;
	void forEachDimension(std::function<bool (Dimension const&)>) const;
	void _isSavingRequired() const;
	void getChunkTickRange() const;
	void getPlatformPlayer(std::string const&) const;
	void getBehaviorFactory() const;
	void getAutonomousEntity(ActorUniqueID) const;
	void getBehaviorTreeGroup() const;
	void getSpawnRulesMutable() const;
	void getSpawnGroupRegistry() const;
	void getPlatformBroadcastMode() const;
	void getAutonomousActiveEntity(ActorUniqueID) const;
	void getPlayerPlatformOnlineId(mce::UUID const&) const;
	void getTickedMobCountPrevious() const;
	void getAutonomousInactiveEntity(ActorUniqueID) const;
	void getPlayerFromUnknownIdentifier(std::string const&) const;
	void getUsers() const;
	void getPlayer(std::string const&) const;
};
