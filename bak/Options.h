#pragma once
#include <string>
#include <memory>
#include <map>

class Options
{
public:
	//Fields
	char filler_Options[UNKNOW_SIZE];
public:
	//Methods
	Options(bool, std::unique_ptr<OptionValueInterface, std::default_delete<OptionValueInterface> >, bool, bool, Options*);
	~Options();
	void getCurrentKeyboardRemapping() const;
	void onScreenSizeChanged(int, int);
	void setOverrideUsername(std::string const&);
	void setIsRatingsPromptShown(bool);
	void get(OptionID);
	void getVRHudDrifts() const;
	void getStereoRendering() const;
	void getDevResetClientId() const;
	void getVRLivingRoomMode() const;
	void getDisplayedUsername() const;
	void getVRHandControlsHUD() const;
	void getViewDistanceChunks() const;
	void getSplitscreenDirection() const;
	void getVRMouseUISensitivity() const;
	void getPlayerViewPerspective() const;
	void get(OptionID) const;
	void addObserver(OptionsObserver&);
	void saveIfNeeded();
	void unregisterLocks(void*);
	void getLogFlushDelay();
	void isLoadInProgress();
	void notifySaveAllowed();
	void checkVersionUpdate();
	void unregisterObserver(void*);
	void wasLoggedInLastSession();
	void getDevBenchmarkModeTime();
	void setHasEverLoggedIntoXbl(bool);
	void getDevEnableProfilerOutput();
	void getLanguage() const;
	void getRenderDebug() const;
	void getUseIPv6Only() const;
	void getServerVisible() const;
	void getAutoUpdateMode() const;
	void getRealmsEndpoint() const;
	void getIsAutomationRun() const;
	void getMultiPlayerGame() const;
	void getXboxLiveSandbox() const;
	void getDevAutoLoadLevel() const;
	void getRenderingProfile() const;
	void getSaveAndQuitCount() const;
	void getUseFontOverrides() const;
	void hasOverrideUsername() const;
	void isLogCategoryEnabled(BedrockLog::LogCategory) const;
	void shouldBlockUserInput() const;
	void getCanUseCellularData() const;
	void getRealmsRelyingParty() const;
	void getAutomationTestRunID() const;
	void getDevMixerInteractive() const;
	void getHasShownPatchNotice() const;
	void getAcknowledgedAutoSave() const;
	void getDevConnectionQuality() const;
	void getHasEverLoggedIntoXbl() const;
	void getIsRatingsPromptShown() const;
	void getMaxViewDistanceChunks() const;
	void getDevDisableClientBlobCache() const;
	void getHasChosenNotToSignInToXbl() const;
	void getRequireWebsocketEncryption() const;
	void shouldAppendDebugLogTimestamp() const;
	void getDevClientBlobCacheOnLocalServer() const;
	void getSkinId() const;
	void isHotbarOnlyTouch() const;
	void isLeftHanded() const;
	void getHideToolTips() const;
	void getHideKeyboardToolTips() const;
	void getVersionString();
	void setHideGUI(bool);
	void setLanguage(std::string const&);
	void setHideToolTips(bool);
	void setHdrBrightness(float);
	void setHidePaperDoll(bool);
	void setHasShownPatchNotice(bool);
	void setNumberOfOwnedRealms(int);
	void setAcknowledgedAutoSave(bool);
	void setNumberOfFriendsRealms(int);
	void getGamePadRemappingByType(VRControllerType);
	void setVROptionsComfortControls(bool);
	void setHasChosenNotToSignInToXbl(bool);
	void setRealmsInviteShowFriendsOption(bool);
	void getHideHud() const;
	void getHdrBrightness() const;
	void getHidePaperDoll() const;
	void getRealmsEnvironment() const;
	void getNumberOfOwnedRealms() const;
	void getNumberOfFriendsRealms() const;
	void getKeyboardRemappingByType(KeyboardType) const;
	void getVROptionsComfortControls() const;
	void getVRShowComfortSelectScreen() const;
	void getDevCreateRealmWithoutPurchase() const;
	void getRealmsInviteShowFriendsOption() const;
	void getUIProfile() const;
	void getScreenAnimations() const;
	void getSplitControls() const;
	void getMotionControllerRemapping();
	void getSensitivity(InputMode) const;
	void getInvertYMouse(InputMode) const;
	void updateInputMode(InputMode);
	void getDevIgnoreUserInput() const;
	void setDevLogArea(bool);
	void setDevLogTrace(bool);
	void setDevLogAppend(bool);
	void setLogFlushDelay(int);
	void setDevLogPriority(bool);
	void setDevLogThreadId(bool);
	void setDevLogMessageId(bool);
	void setDevLogProcessId(bool);
	void setDevLogTimestamp(bool);
	void setDevLogSilentLogging(bool);
	void setDevLogFlushImmediate(bool);
	void setDevLogAreaFilterString(std::string const&);
	void toggleDevLogPriorityFilter(int);
	void getDevLogArea() const;
	void getDevLogTrace() const;
	void getDevLogAppend() const;
	void getDevLogPriority() const;
	void getDevLogThreadId() const;
	void getDevLogMessageId() const;
	void getDevLogProcessId() const;
	void getDevLogTimestamp() const;
	void getDevLogSilentLogging() const;
	void getDevLogFlushImmediate() const;
	void getDevLogPriorityFilter() const;
	void getDevLogAreaFilterString() const;
	void setTexelAA(bool);
	void _loadOptions(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >);
	void getVRTapTurn();
	void setDifficulty(int);
	void setFullscreen(bool);
	void tickSaveTimer();
	void _registerLocks();
	void getChatOptions();
	void setDevFindMobs(bool);
	void setFixedCamera(bool);
	void setHideScreens(bool);
	void setRenderDebug(DebugHudOptions);
	void setSensitivity(float, InputMode);
	void setUseIPv6Only(bool);
	void _registerOption(std::unique_ptr<Option, std::default_delete<Option> >);
	void getVR180Turning();
	void setDevLogThread(bool);
	void setRenderClouds(bool);
	void _registerOptions();
	void getRecentSkinIds();
	void getVRRollTurning();
	void setRecentSkinIds(std::vector<std::string, std::allocator<std::string> > const&);
	void setServerVisible(bool);
	void setSplitControls(bool);
	void _loadInputMapping(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&);
	void setDevRenderPaths(bool);
	void setEduHasLoggedIn(bool);
	void setHideItemInHand(bool);
	void setRealmsEndpoint(std::string const&);
	void setVRHeadSteering(bool);
	void _endLoadingSession();
	void _registerObservers();
	void getVRMirrorTexture();
	void setMultiPlayerGame(bool);
	void setSwitchCoinDebug(bool);
	void setXboxLiveVisible(bool);
	void _loadSpecialOptions(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&);
	void _readGamepadMapping(std::string const&, std::string const&);
	void _setOptionCallbacks();
	void debugSetGameVersion(int, int, int, int, int);
	void getTelemetryOptions(std::vector<OptionID, std::allocator<OptionID> >&);
	void requestSaveDeferral();
	void setInterfaceOpacity(float);
	void setLastCustomSkinId(std::string const&);
	void setSaveAndQuitCount(int);
	void setShowAutoSaveIcon(bool);
	void setUseFontOverrides(bool);
	void setVRLivingRoomMode(bool);
	void _beginLoadingSession();
	void _readKeyboardMapping(std::string const&, std::string const&);
	void _registerChatOptions();
	void setIngamePlayerNames(bool);
	void setRealmsEnvironment(RealmsEnvironment);
	void loadOptionsFromString(std::string);
	void setCanUseCellularData(bool);
	void setDevRenderGoalState(bool);
	void setRealmsRelyingParty(std::string const&);
	void elevateSaveRequestMode(Options::SaveRequestMode);
	void setDevMixerInteractive(bool);
	void setFileStorageLocation(FileStorageDirectory);
	void getVRLivingRoomHintTime();
	void setResetPlayerAlignment(bool);
	void setSplitscreenDirection(int);
	void setUseRetailXboxSandbox(bool);
	void setVRLivingRoomHintTime(int);
	void setAutomationUploadToken(std::string const&);
	void setForceUseUnsortedPolys(bool);
	void setPlayerViewPerspective(int);
	void setRealmsEndpointPayment(std::string const&);
	void _parseFilesAndLoadOptions();
	void setCreateRealmUpsellCount(int);
	void setDevRenderBoundingBoxes(bool);
	void setDevRenderSchedulerInfo(bool);
	void setStoreHasPurchasedCoins(bool);
	void getVRTapTurningSensitivity();
	void setDevShowDevConsoleButton(bool);
	void getVRRollTurningSensitivity();
	void setDevDisplayTreatmentPanel(bool);
	void setRealmsRelyingPartyPayment(std::string const&);
	void _registerAccessibilityOptions();
	void setDevRenderCoordinateSystems(bool);
	void setRequireWebsocketEncryption(bool);
	void setShownPlatformPremiumUpsell(bool);
	void getDevAchievmentsAlwaysEnabled();
	void setSplitscreenInterfaceOpacity(float);
	void setSplitscreenIngamePlayerNames(bool);
	void setDevShowMinecraftTCUIReplacement(bool);
	void setAutomationUnitBlackListedTestTags(std::string const&);
	void setShowRealmsTrialButtonFromPlayScreen(bool);
	void setAutomationFunctionalBlackListedTestTags(std::string const&);
	void setShownPlatformNetworkConnectConfirmation(bool);
	void load(Core::PathBuffer<std::string>);
	void _save();
	void reset(OptionResetFlags, InputMode);
	void setMSAA(int);
	void setMusic(float);
	void setSound(float);
	void setSkinId(std::string const&);
	void setVRMSAA(int);
	void getBobView() const;
	void getAutoJump(InputMode) const;
	void getHideHand() const;
	void getFovToggle() const;
	void getFancySkies() const;
	void getFullscreen() const;
	void getChatOptions() const;
	void getDevFindMobs() const;
	void getFixedCamera() const;
	void getHideScreens() const;
	void getStutterTurn() const;
	void getDevLogThread() const;
	void getFancyBubbles() const;
	void getRenderClouds() const;
	void getVRLinearJump() const;
	void _cleanPlayerName(std::string const&) const;
	void getVRHandPointer() const;
	void getVRJoystickAim() const;
	void _getOptionLogLine(Option*) const;
	void _saveInputMapping(std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > >&) const;
	void getDevRenderPaths() const;
	void getEduHasLoggedIn() const;
	void getHideItemInHand() const;
	void getSmoothLighting() const;
	void getTestBranchName() const;
	void getVRHandsVisible() const;
	void getVRHeadSteering() const;
	void getVRLinearMotion() const;
	void getVRStickyMining() const;
	void getGameSensitivity(InputMode) const;
	void getSwitchCoinDebug() const;
	void getDestroyVibration(InputMode) const;
	void getInterfaceOpacity() const;
	void getLastCustomSkinId() const;
	void getShowAutoSaveIcon() const;
	void getStutterTurnSound() const;
	void getSwapJumpAndSneak() const;
	void getVRGazePitchBoost() const;
	void getIngamePlayerNames() const;
	void getPrimaryUserStatus() const;
	void getTransparentLeaves() const;
	void getDevRenderAttachPos() const;
	void getDevRenderGoalState() const;
	void getTestTagsServiceURL() const;
	void getUseMouseForDigging() const;
	void getVRHandControlsItem() const;
	void getDevAddUsersSilently() const;
	void getFileStorageLocation() const;
	void getParticleViewDistance() const;
	void getRenderDistanceLevels() const;
	void getResetPlayerAlignment() const;
	void getUseRetailXboxSandbox() const;
	void getVRRightStickDeadBand() const;
	void getAutomationRepeatCount() const;
	void getAutomationUploadToken() const;
	void getForceUseUnsortedPolys() const;
	void getRealmsEndpointPayment() const;
	void getVRUsesNormalHitEffect() const;
	void _shouldLoadGamepadMapping(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&) const;
	void getAutomationUnitTestTags() const;
	void getCreateRealmUpsellCount() const;
	void getDevRenderBoundingBoxes() const;
	void getDevRenderSchedulerInfo() const;
	void getPreferPolyTessellation() const;
	void getStoreHasPurchasedCoins() const;
	void getVRRightStickGazeAdjust() const;
	void shouldUploadTestArtifacts() const;
	void getAutomationFileUploadUrl() const;
	void getDevAssertionsDebugBreak() const;
	void getDevAssertionsShowDialog() const;
	void getDevShowDevConsoleButton() const;
	void getHMDPositionDisplacement() const;
	void getStutterConstantTimeMode() const;
	void getVRRightStickPitchAssist() const;
	void getDefaultPlatformSafeZoneX() const;
	void getDefaultPlatformSafeZoneY() const;
	void getDevDisplayTreatmentPanel() const;
	void getNewParticleSystemEnabled() const;
	void getRealmsRelyingPartyPayment() const;
	void getShouldQuitAppAfterTesting() const;
	void getVRRightStickPitchMaxAngle() const;
	void getVRStickyMiningHandPointer() const;
	void hasAutomationTestRunTimedOut() const;
	void getDevRenderCoordinateSystems() const;
	void getShownPlatformPremiumUpsell() const;
	void getVRLivingRoomCursorCentered() const;
	void getVRUsesRedFlashForHitEffect() const;
	void getSplitscreenInterfaceOpacity() const;
	void getAutomationFunctionalTestTags() const;
	void getAutomationPerTestcaseTimeout() const;
	void getSplitscreenIngamePlayerNames() const;
	void getDevDisableConnectedStoragePull() const;
	void getDevDisableConnectedStoragePush() const;
	void getDevShowMinecraftTCUIReplacement() const;
	void getVRRightStickPitchAssistSteppings() const;
	void getAutomationUnitBlackListedTestTags() const;
	void getShowRealmsTrialButtonFromPlayScreen() const;
	void getAutomationFunctionalBlackListedTestTags() const;
	void getShownPlatformNetworkConnectConfirmation() const;
	void getGamma() const;
	void getMusic() const;
	void getSound() const;
public:
	//Objects
	static Options * do_not_save;
	static Options * not_available;
};//Options
