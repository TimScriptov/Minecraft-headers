#pragma once
#include <string>
#include <memory>
#include <map>

class LocalPlayer
 : public Player
 : public Mob
 : public Actor
{
public:
	//Fields
	char filler_LocalPlayer[UNKNOW_SIZE];
public:
	//Virtual Tables
	virtual ~LocalPlayer();
	virtual ~LocalPlayer();
	virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
	virtual void setPos(Vec3 const&);
	virtual void move(Vec3 const&);
	virtual void teleportTo(Vec3 const&, bool, int, int);
	virtual void normalTick();
	virtual void assignRideTickFunctions(RideTickComponent&);
	virtual void startRiding(Actor&);
	virtual void setSneaking(bool);
	virtual void actuallyHurt(int, ActorDamageSource const*, bool);
	virtual void handleEntityEvent(ActorEvent, int);
	virtual void setArmor(ArmorSlot, ItemStack const&);
	virtual void setOffhandSlot(ItemStack const&);
	virtual void handleInsidePortal(BlockPos const&);
	virtual void changeDimension(AutomaticID<Dimension, int>, bool);
	virtual void changeDimension(ChangeDimensionPacket const&);
	virtual void getControllingPlayer() const;
	virtual void checkFallDamage(float, bool);
	virtual void causeFallDamage(float);
	virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, Block const&, bool);
	virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, int, bool);
	virtual void stopRiding(bool, bool, bool);
	virtual void onEffectRemoved(MobEffectInstance&);
	virtual void swing();
	virtual void startSpinAttack();
	virtual void stopSpinAttack();
	virtual void die(ActorDamageSource const&);
	virtual void _hurt(ActorDamageSource const&, int, bool, bool);
	virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _doAutoAttackOnTouch(Actor&);
	virtual void setSprinting(bool);
	virtual void travel(float, float, float);
	virtual void applyFinalFriction(float, bool);
	virtual void aiStep();
	virtual void setItemSlot(EquipmentSlot, ItemStack const&);
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void _allowAscendingScaffolding() const;
	virtual void prepareRegion(ChunkSource&);
	virtual void destroyRegion();
	virtual void suspendRegion();
	virtual void _fireDimensionChanged();
	virtual void tickWorld(Tick const&);
	virtual void frameUpdate(FrameUpdateContextBase&);
	virtual void getTickingOffsets() const;
	virtual void checkMovementStats(Vec3 const&);
	virtual void getCurrentStructureFeature() const;
	virtual void respawn();
	virtual void resetRot();
	virtual void resetPos(bool);
	virtual void isInTrialMode();
	virtual void startCrafting(BlockPos const&, bool);
	virtual void openContainer(BlockPos const&);
	virtual void openContainer(ActorUniqueID const&);
	virtual void openFurnace(BlockPos const&);
	virtual void openBlastFurnace(BlockPos const&);
	virtual void openSmoker(BlockPos const&);
	virtual void openEnchanter(BlockPos const&);
	virtual void openAnvil(BlockPos const&);
	virtual void openGrindstone(BlockPos const&);
	virtual void openBrewingStand(BlockPos const&);
	virtual void openHopper(BlockPos const&);
	virtual void openHopper(ActorUniqueID const&);
	virtual void openDispenser(BlockPos const&, bool);
	virtual void openBeacon(BlockPos const&);
	virtual void openPortfolio();
	virtual void openBook(int, bool, int, BlockActor*);
	virtual void openCommandBlock(BlockPos const&);
	virtual void openCommandBlockMinecart(ActorUniqueID const&);
	virtual void openHorseInventory(ActorUniqueID const&);
	virtual void openTrading(ActorUniqueID const&, bool);
	virtual void openChalkboard(ChalkboardBlockActor&, bool);
	virtual void openNpcInteractScreen(Actor&);
	virtual void openInventory();
	virtual void openStructureEditor(BlockPos const&);
	virtual void openLabTable(BlockPos const&);
	virtual void openElementConstructor(BlockPos const&);
	virtual void openCompoundCreator(BlockPos const&);
	virtual void openMaterialReducer(BlockPos const&);
	virtual void openLoom(BlockPos const&);
	virtual void openStonecutter(BlockPos const&);
	virtual void openCartographyTable(BlockPos const&);
	virtual void displayClientMessage(std::string const&);
	virtual void displayLocalizableMessage(std::string const&, std::vector<std::string, std::allocator<std::string> > const&);
	virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
	virtual void startSleepInBed(BlockPos const&);
	virtual void stopSleepInBed(bool, bool);
	virtual void canStartSleepInBed();
	virtual void openSign(BlockPos const&);
	virtual void isLocalPlayer() const;
	virtual void isHostingPlayer() const;
	virtual void isLoading() const;
	virtual void stopLoading();
	virtual void setPlayerGameType(GameType);
	virtual void _crit(Actor&);
	virtual void getEventing() const;
	virtual void getUserId() const;
	virtual void addExperience(int);
	virtual void addLevels(int);
	virtual void setContainerData(IContainerManager&, int, int);
	virtual void slotChanged(IContainerManager&, int, ItemStack const&, ItemStack const&, bool);
	virtual void refreshContainer(IContainerManager&);
	virtual void deleteContainerManager();
	virtual void isEntityRelevant(Actor const&);
	virtual void isTeacher() const;
	virtual void sendInventoryTransaction(InventoryTransaction const&) const;
	virtual void sendComplexInventoryTransaction(std::unique_ptr<ComplexInventoryTransaction, std::default_delete<ComplexInventoryTransaction> >) const;
	virtual void sendNetworkPacket(Packet&) const;
	virtual void getPlayerEventCoordinator();
public:
	//Methods
	LocalPlayer(IClientInstance&, Level&, std::string const&, GameType, NetworkIdentifier const&, unsigned char, mce::UUID, std::string const&, std::unique_ptr<Certificate, std::default_delete<Certificate> >);
	void openCodeScreen();
	void isHeadOnCollision();
	void getJumpRidingScale();
	void setJumpRidingScale(float);
	void registerFramewiseActionOrStop();
	void getClientInstance() const;
	void resetLastHmdAngle();
	void requestChunkRadius(unsigned int);
	void updateFromCamera(Camera const&);
	void clearMovementState();
	void getLoadingState() const;
	void setInventoryOptions(InventoryOptions const&);
	void getPreloadingProgress();
	void getInventoryOptions() const;
	void isSwimming() const;
	void isAutoJumpEnabled() const;
	void closeScreen();
	void hurtTo(int);
	void setTeacher();
	void frameUpdate(FrameUpdateContext&);
	void sendPosition();
	void stopPaddling(Side);
	void getPaddleData();
	void startPaddling(Side);
	void _applyTurnDelta(Vec2 const&);
	void _updateAutoJump();
	void localPlayerTurn(Vec2 const&);
	void setLeavingLevel(bool);
	void _calculateFlight(float, float, float);
	void getInventoryMenu();
	void addRegionListener(LocalPlayer::RegionListener*);
	void setAutoJumpEnabled(bool);
	void _computeBowOverride(Vec3&);
	void setPortalEffectTime(float);
	void _RotationVec2Modulus(Vec2&);
	void removeRegionListener(LocalPlayer::RegionListener*);
	void setOPortalEffectTime(float);
	void displayItemActivation(ItemStack const&);
	void getFieldOfViewModifier();
	void onGameEventNotification(ui::GameEventNotification);
	void _modifyDeltaByHMDPosition(Vec3&, float);
	void getNetworkChunkSubscriber();
	void localPlayerRenderFrequencyMove(float);
	void _fillChunksNeededForLoadOffsets();
	void _getClientPlayerEventCoordinator();
	void _postJumpFrameOfReferenceAdjustCheck(bool);
	void setPlayerGameTypeWithoutServerNotification(GameType);
	void chat(std::string const&);
	void _input();
	void pickBlock(HitResult const&, bool);
	void sendInput();
	void getLookBob() const;
	void getPickRange() const;
	void getOldLookBob() const;
	void getActivatedItem() const;
	void hasBossRegistered(ActorUniqueID) const;
	void getViewBlockRadius() const;
	void getPortalEffectTime() const;
	void getOPortalEffectTime() const;
	void getItemActivationTicks() const;
	void isLocalSplitscreenWith(ActorUniqueID const&) const;
	void _shouldRotateWithCamera() const;
	void getItemActivationOffsetX() const;
	void getItemActivationOffsetY() const;
	void getNetworkChunkSubscriber() const;
	void _hasLoadedEnoughChunksToView() const;
	void isFlying() const;
public:
	//Objects
	static LocalPlayer * BOAT_REVERSE_FORCE;
	static LocalPlayer * MAX_DIMENSION_LOAD_IN_TIME;
};//LocalPlayer
